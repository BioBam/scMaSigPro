* Checking for deprecated package usage... OK
* Checking for remote package usage... OK
* Checking for 'LazyData: true' usage...
* NOTE: 'LazyData:' in the 'DESCRIPTION' should be set to false or removed
* Checking version number... OK
* Checking version number validity... OK
* Checking R version dependency...
* NOTE: Update R version dependency from 4.0 to 4.3.0.
* Checking package size... OK
* Checking individual file sizes... OK
* Checking biocViews... OK
* Checking that biocViews are present... OK
* Checking package type based on biocViews... OK
* Checking for non-trivial biocViews... OK
* Checking that biocViews come from the same category... OK
* Checking biocViews validity... OK
* Checking for recommended biocViews... OK
* Checking build system compatibility... OK
* Checking for blank lines in DESCRIPTION... OK
* Checking if DESCRIPTION is well formatted... OK
* Checking for proper Description: field... OK
* Checking for whitespace in DESCRIPTION field names... OK
* Checking that Package field matches directory/tarball name... OK
* Checking for Version field... OK
* Checking for valid maintainer...
* NOTE: Consider adding the maintainer's ORCID iD in 'Authors@R' with 'comment=c(ORCID="...")'
* Checking License: for restrictive use... OK
* Checking for recommeded fields in DESCRIPTION... OK
* Checking for pinned package versions... OK
* Checking DESCRIPTION/NAMESPACE consistency... OK
* Checking .Rbuildignore... OK
* Checking for stray BiocCheck output folders... OK
* Checking for inst/doc folders... OK
* Checking vignette directory...
* NOTE: Potential intermediate files found:
vignettes/basic-workflow.html
* WARNING: Evaluate more vignette chunks.
* NOTE:  'sessionInfo' not found in vignette(s)
Missing from file(s):
vignettes/Basic-Workflow.Rmd
* Checking package installation calls in R code... OK
* Checking for library/require of scMaSigPro... OK
* Checking coding practice...
* NOTE:  Avoid sapply(); use vapply()
Found in files:
R/create_range.R (line  38, column 20)
R/create_range.R (line  41, column 20)
R/sc.T.fit.R (line 259, column 39)
* NOTE:  Avoid 1:...; use seq_len() or seq_along()
Found in files:
convert_to_path.R (line 21, column 44)
extract_fitting.R (line 43, column 17)
make.pseudobulk.counts.R (line 75, column 23)
optimize.bin.max.R (line 32, column 15)
sc.p.vector.R (line 161, column 29)
sc.p.vector.R (line 165, column 14)
sc.plot.bins.bar.R (line 40, column 56)
sc.plot.bins.tile.R (line 40, column 56)
sc.PlotGroups.R (line 112, column 58)
sc.stepfor.R (line 7, column 13)
sc.stepfor.R (line 17, column 12)
sc.stepfor.R (line 35, column 17)
sc.T.fit.R (line 150, column 16)
sc.T.fit.R (line 191, column 16)
sc.T.fit.R (line 207, column 16)
sc.T.fit.R (line 224, column 16)
sc.T.fit.R (line 297, column 17)
sc.T.fit.R (line 300, column 19)
sc.two.ways.stepback.R (line 25, column 17)
sc.two.ways.stepback.R (line 35, column 16)
sc.two.ways.stepback.R (line 43, column 18)
sc.two.ways.stepback.R (line 54, column 19)
sc.two.ways.stepfor.R (line 8, column 15)
sc.two.ways.stepfor.R (line 18, column 14)
sc.two.ways.stepfor.R (line 60, column 17)
selectPath.m3.R (line 116, column 24)
squeeze.R (line 297, column 15)
squeeze.R (line 419, column 21)
* NOTE:  Avoid 'cat' and 'print' outside of 'show' methods
Found in files:
print() in R/as_scmp.R (line 134, column 7)
print() in R/as_scmp.R (line 182, column 7)
print() in R/sc.p.vector.R (line 185, column 9)
print() in R/sc.plot.bins.bar.R (line  62, column 3)
print() in R/sc.plot.bins.tile.R (line  61, column 3)
print() in R/sc.PlotGroups.R (line 156, column 5)
cat() in R/scmpShow.R (line  15, column 3)
cat() in R/scmpShow.R (line  16, column 3)
cat() in R/scmpShow.R (line  17, column 3)
cat() in R/scmpShow.R (line  18, column 3)
cat() in R/scmpShow.R (line  23, column 5)
cat() in R/scmpShow.R (line  24, column 5)
cat() in R/scmpShow.R (line  34, column 5)
cat() in R/scmpShow.R (line  35, column 5)
cat() in R/scmpShow.R (line  43, column 7)
cat() in R/scmpShow.R (line  45, column 7)
cat() in R/scmpShow.R (line  51, column 5)
* NOTE:  Avoid the use of 'paste' in condition signals
Found in files:
R/align.pseudotime.R (line 48, column 15)
R/annotate_monocle3_cds.R (line 89, column 13)
R/annotate_monocle3_cds.R (line 89, column 73)
R/annotate_monocle3_cds.R (line 130, column 13)
R/annotate_monocle3_cds.R (line 131, column 13)
R/annotate_sce.R (line 64, column 15)
R/annotate_sce.R (line 97, column 15)
R/create_range.R (line 44, column 13)
R/estBinSize.R (line 65, column 10)
R/optimize.bin.max.R (line 67, column 19)
R/sc.p.vector.R (line 130, column 15)
R/sc.T.fit.R (line 144, column 15)
R/sc.T.fit.R (line 317, column 15)
R/squeeze.R (line 166, column 13)
R/squeeze.R (line 167, column 13)
R/squeeze.R (line 169, column 13)
R/squeeze.R (line 193, column 17)
R/squeeze.R (line 199, column 15)
R/squeeze.R (line 211, column 19)
R/squeeze.R (line 218, column 17)
R/squeeze.R (line 233, column 15)
R/squeeze.R (line 252, column 17)
R/squeeze.R (line 284, column 15)
R/squeeze.R (line 288, column 15)
R/squeeze.R (line 458, column 17)
* NOTE:  Avoid redundant 'stop' and 'warn*' in signal conditions
Found in files:
R/squeeze.R (line 218, column 23)
* WARNING:  Avoid T/F variables; If logical, use TRUE/FALSE 
Found 10 times:
F in R/sc.make.design.matrix.R (line  52, column 84)
T in R/sc.p.vector.R (line 218, column 52)
T in R/sc.p.vector.R (line 218, column 67)
T in R/sc.p.vector.R (line 222, column 17)
T in R/sc.p.vector.R (line 222, column 32)
F in R/sc.p.vector.R (line 110, column 19)
F in R/sc.p.vector.R (line 167, column 21)
F in R/sc.T.fit.R (line 262, column 33)
T in R/showSigProf.R (line  39, column 56)
F in R/showSigProf.R (line  39, column 66)
* WARNING:  Avoid class membership checks with class() / is() and == / !=; Use is(x, 'class') for S4 classes
Found in files:
as_scmp.R (line 104, column 21)
as_scmp.R (line 139, column 28)
selectPath.m3.R (line 22, column 32)
* Checking parsed R code in R directory, examples, vignettes...
* NOTE: Avoid 'suppressWarnings'/'*Messages' if possible (found 1 times)
suppressMessages() in R/shinySelection.R (line 402, column 16)
* Checking function lengths...
* NOTE: The recommended function length is 50 lines or less. There are 21 functions greater than 50 lines.
The longest 5 functions are:
squeeze() (R/squeeze.R): 411 lines
shinySelect() (R/shinySelection.R): 392 lines
server() (R/shinySelection.R): 313 lines
sc.T.fit() (R/sc.T.fit.R): 288 lines
sc.p.vector() (R/sc.p.vector.R): 206 lines
* Checking man page documentation...
* WARNING: Empty or missing \value sections found in man pages.
Found in files:
man/addParamClass-class.Rd
man/align.pseudotime.Rd
man/dot-smsp_show.Rd
man/edesignClass-class.Rd
man/scMaSigProClass-class.Rd
man/scPVectorClass-class.Rd
man/scTFitClass-class.Rd
man/shinySelect.Rd
* ERROR: At least 80% of man pages documenting exported objects must have runnable examples.
The following pages do not:
annotate_monocle3_cds.Rd
annotate_sce.Rd
as_scmp.Rd
create_scmpObj.Rd
dot-smsp_show.Rd
sc.get.siggenes.Rd
sc.make.design.matrix.Rd
sc.p.vector.Rd
sc.plot.bins.bar.Rd
sc.plot.bins.tile.Rd
sc.PlotGroups.Rd
sc.T.fit.Rd
selectPath.m3.Rd
showCoeff.Rd
showGroupCoeff.Rd
showInflu.Rd
showParams.Rd
showSigProf.Rd
showSol.Rd
showTS.Rd
squeeze.Rd
* NOTE: Usage of dontrun{} / donttest{} tags found in man page examples. 34% of man pages use at least one of these tags.
Found in files:
annotate_monocle3_cds.Rd
annotate_sce.Rd
as_scmp.Rd
create_scmpObj.Rd
sc.path.intersection.Rd
showCoeff.Rd
showGroupCoeff.Rd
showInflu.Rd
showParams.Rd
showSigProf.Rd
showSol.Rd
showTS.Rd
squeeze.Rd
* NOTE: Use donttest{} instead of dontrun{}.
Found in files:
annotate_monocle3_cds.Rd
annotate_sce.Rd
as_scmp.Rd
create_scmpObj.Rd
sc.path.intersection.Rd
showCoeff.Rd
showGroupCoeff.Rd
showInflu.Rd
showParams.Rd
showSigProf.Rd
showSol.Rd
showTS.Rd
squeeze.Rd
* Checking package NEWS...
* NOTE: Consider adding a NEWS file, so your package news will be included in Bioconductor release announcements.
* Checking unit tests... OK
* Checking skip_on_bioc() in tests... OK
* Checking formatting of DESCRIPTION, NAMESPACE, man pages, R source, and vignette source...
* NOTE: Consider shorter lines; 699 lines (11%) are > 80 characters long.
First few lines:
R/addParamClass.R#L3 #' @slot bin_pseudotime_colname A charac ...
R/addParamClass.R#L6 #' @slot pseudotime_colname A character  ...
R/addParamClass.R#L8 #' @slot path_colname A character repres ...
R/addParamClass.R#L9 #' @slot bin_colname A character represe ...
R/addParamClass.R#L10 #' @slot bin_size_colname A character re ...
R/addParamClass.R#L11 #' @slot bin_members_colname A character ...
R/addParamClass.R#L13 #' @slot min.obs Minimum value to estima ...
R/addParamClass.R#L17 #' @slot step.method A character specify ...
R/addParamClass.R#L18 #' @slot useWeights A logical specifying ...
R/addParamClass.R#L48     min.obs = "numeric", # Minimum value ...
R/addParamClass.R#L72       if (length(slot_value) == 0 || !is ...
R/addParamClass.R#L73         errors <- c(errors, paste(slot_n ...
R/addParamClass.R#L101         errors <- c(errors, paste(slot_n ...
R/align.pseudotime.R#L5 #' range of pseudotime, and then it uses ...
R/align.pseudotime.R#L7 #' `scales::rescale`. In future we expec ...
R/align.pseudotime.R#L12 #' Pseudotime values. It is generated us ...
R/align.pseudotime.R#L15 #' for Path. It is generated using `colD ...
R/align.pseudotime.R#L23 align.pseudotime <- function(scmpObj, ps ...
R/align.pseudotime.R#L28   cell.metadata.sub <- cell.metadata[, c ...
R/align.pseudotime.R#L35   path1_time <- cell.metadata.sub[cell.m ...
R/align.pseudotime.R#L36   names(path1_time) <- cell.metadata.sub ...
R/align.pseudotime.R#L37   path2_time <- cell.metadata.sub[cell.m ...
R/align.pseudotime.R#L38   names(path2_time) <- cell.metadata.sub ...
R/align.pseudotime.R#L48       message(paste(pTimeVectors$long_ve ...
R/align.pseudotime.R#L49       message(paste("Adjusting", pTimeVe ...
R/align.pseudotime.R#L55       pTimeVectors$long_vec <- rescale(p ...
R/align.pseudotime.R#L58         message(paste("New range for the ...
R/align.pseudotime.R#L65       colnames(short_tmp) <- c(paste(pse ...
R/align.pseudotime.R#L70       colnames(long_tmp) <- c(paste(pseu ...
R/align.pseudotime.R#L78       cell.metadata <- cell.metadata[, c ...
R/align.pseudotime.R#L84       scmpObj@addParams@pseudotime_colna ...
R/annotate_monocle3_cds.R#L4 #' `annotate_monocle3_cds()` annotates t ...
R/annotate_monocle3_cds.R#L30 #' \code{\link[igraph]{shortest_paths}}, ...
R/annotate_monocle3_cds.R#L63   y_to_cells.df <- cds@principal_graph_a ...
R/annotate_monocle3_cds.R#L66   # Add a new column 'barcode' with the  ...
R/annotate_monocle3_cds.R#L68     mutate(barcode = rownames(y_to_cells ...
R/annotate_monocle3_cds.R#L76     message(paste("Identified ", root_la ...
R/annotate_monocle3_cds.R#L82   # Get the endpoint nodes (degree 1 nod ...
R/annotate_monocle3_cds.R#L88     message(paste("Identified endpoints  ...
R/annotate_monocle3_cds.R#L89     message(paste("Number of potential", ...
R/annotate_monocle3_cds.R#L105     path.frame <- data.frame(weights = a ...
R/annotate_monocle3_cds.R#L114   pseudotime.path.frame <- matrix(cds@pr ...
R/annotate_monocle3_cds.R#L128     maxPath <- num.cells.per.path[num.ce ...
R/annotate_monocle3_cds.R#L129     minPath <- num.cells.per.path[num.ce ...
R/annotate_monocle3_cds.R#L130     message(paste("Longest", path_prefix ...
R/annotate_monocle3_cds.R#L131     message(paste("Shortest", path_prefi ...
R/annotate_monocle3_cds.R#L150   cell.meta[rownames(cell.meta) %in% c(r ...
R/annotate_monocle3_cds.R#L153   if (all(apply(pseudotime.path.frame, 1 ...
R/annotate_monocle3_cds.R#L159     stop("Pseudotime is different for di ...
R/annotate_monocle3_cds.R#L171   # Return a list with updated cell data ...
R/annotate_sce.R#L1 #' @title Annotate 'SingleCellExperiment ...
R/annotate_sce.R#L4 #' `annotate_sce()` annotates a SingleCe ...
R/annotate_sce.R#L5 #' and path information in its `cell.met ...
R/annotate_sce.R#L19 #' @param existing_path_colname The name ...
R/annotate_sce.R#L29 #' @seealso SingleCellExperiment class o ...
R/annotate_sce.R#L58       all(!is.null(existing_pseudotime_c ...
R/annotate_sce.R#L59       msg = paste("Requested to set 'pat ...
R/annotate_sce.R#L60                   'existing_pseudotime_c ...
R/annotate_sce.R#L65         "Overwritting columns in cell.le ...
R/annotate_sce.R#L66         "' and '", existing_pseudotime_c ...
R/annotate_sce.R#L76       msg = paste("'", existing_pseudoti ...
R/annotate_sce.R#L81       msg = paste("'", existing_path_col ...
R/annotate_sce.R#L85     names(cell.meta)[names(cell.meta) == ...
R/annotate_sce.R#L97       message(paste("Skipping overwritti ...
R/as_scmp.R#L4 #' `as_scmp()` converts a cds/CellDataSe ...
R/as_scmp.R#L7 #' @param object An S4 object of class ` ...
R/as_scmp.R#L13 #' Pseudotime values. It is generated us ...
R/as_scmp.R#L16 #' for Path. It is generated using `colD ...
R/as_scmp.R#L18 #' @param align_pseudotime if two pseudo ...
R/as_scmp.R#L28 #' @seealso `colData` from the \pkg{Sing ...
R/as_scmp.R#L67     all(isS4(object) & all(is(object, "c ...
R/as_scmp.R#L80       assert_that(names(additional_param ...
R/as_scmp.R#L85       assert_that(all(names(additional_p ...
R/as_scmp.R#L86         msg = "Allowed additional parame ...
R/as_scmp.R#L115       existing_pseudotime_colname = addi ...
R/as_scmp.R#L124       compress.sce = SingleCellExperimen ...
R/calc_bin_size.R#L19   # Use the 'str_split' function from th ...
R/calc_bin_size.R#L23   # Finally, 'length' is used to get the ...
R/calc_bin_size.R#L27   # Convert the 'size' variable to a num ...
R/create_range.R#L4 #' This function converts a factor colum ...
R/create_range.R#L11 #'     \item{bin}{A factor column repres ...
R/create_range.R#L37   # Split the character string by comma  ...
R/create_range.R#L40   # Split the character string by comma  ...
R/create_range.R#L45       "Lower Bound:", y1, ", Upper Bound ...
R/create_range.R#L49   # Combine the lower bound, upper bound ...
R/create_scmpObj.R#L11 #' @param pseudotime_colname A character ...
R/create_scmpObj.R#L12 #' @param path_colname A character strin ...
R/create_scmpObj.R#L13 #' @param use_as_bin A logical indicatin ...
R/create_scmpObj.R#L15 #' @return A scMaSigProClass object cont ...
R/create_scmpObj.R#L19 #' # Assuming you have 'counts_matrix',  ...
R/create_scmpObj.R#L41     msg = paste("Number of cells in raw- ...
R/create_scmpObj.R#L50       msg = paste("Number of cells in bi ...
R/create_scmpObj.R#L66     compress.sce = SingleCellExperiment( ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L4 #' Love, M.I., Huber, W., Anders, S. Mod ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L25 #' @param controlGenes optional, numeric ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L57     stop("every gene contains at least o ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L69       exp(locfunc((log(cnts) - loggeomea ...
R/estBinSize.R#L4 #' This function calculates the optimal  ...
R/estBinSize.R#L6 #' @param time_vector A numeric vector.  ...
R/estBinSize.R#L8 #' @param drop_fac A numeric. A factor t ...
R/estBinSize.R#L9 #' @param bin_method A character string. ...
R/estBinSize.R#L12 #' A numeric value representing the esti ...
R/estBinSize.R#L16 #' - "Freedman.Diaconis": bin size is pr ...
R/estBinSize.R#L17 #' - "Sqrt": bin size is proportional to ...
R/estBinSize.R#L18 #' - "Sturges": bin size is proportional ...
R/estBinSize.R#L19 #' - "Rice": bin size is proportional to ...
R/estBinSize.R#L21 #' - "Scott.Normal": bin size is proport ...
R/estBinSize.R#L23 #' After estimating the bin size, it is  ...
R/estBinSize.R#L27 #' estBinSize(time_vector = c(1, 2, 3, 4 ...
R/estBinSize.R#L38       # Freedman-Diaconis rule: bin size ...
R/estBinSize.R#L39       # and inversely proportional to th ...
R/estBinSize.R#L43       # Square root rule: bin size is pr ...
R/estBinSize.R#L47       # Sturges' rule: bin size is propo ...
R/estBinSize.R#L51       # Rice Rule: bin size is proportio ...
R/estBinSize.R#L55       # Doane's formula: accounts for da ...
R/estBinSize.R#L61       # Scott's normal reference rule: a ...
R/estBinSize.R#L62       # Bin size is proportional to the  ...
R/estBinSize.R#L65     stop(paste("Invalid bin_method: ", b ...
R/extract_fitting.R#L1 extract_fitting <- function(reg, lmf, mo ...
R/extract_fitting.R#L20   if ((!(result$aic == -Inf) & !is.na(re ...
R/extract_fitting.R#L24     # model.glm.0 <- glm(y ~ 1, family = ...
R/extract.intervals.R#L1 extract.intervals <- function(time.vecto ...
R/make.pseudobulk.counts.R#L4 #' `make.pseudobulk.counts()` creates a  ...
R/make.pseudobulk.counts.R#L6 #' @param scmpObject object of Class scM ...
R/make.pseudobulk.counts.R#L8 #' @param bin_members_colname Name of th ...
R/make.pseudobulk.counts.R#L9 #' storing information about the members ...
R/make.pseudobulk.counts.R#L13 #' aggregate counts within each cluster. ...
R/make.pseudobulk.counts.R#L14 #' @param assay_name Name of the Assay i ...
R/make.pseudobulk.counts.R#L18 #' A data.frame. The data frame includes ...
R/make.pseudobulk.counts.R#L22 #' For each bin, it identifies the cells ...
R/make.pseudobulk.counts.R#L23 #' counts from the counts data frame. It ...
R/make.pseudobulk.counts.R#L24 #' counts (depending on the specified me ...
R/make.pseudobulk.counts.R#L25 #' The result is a pseudo bulk counts da ...
R/make.pseudobulk.counts.R#L41                                    bin_m ...
R/make.pseudobulk.counts.R#L42                                    bin_c ...
R/make.pseudobulk.counts.R#L65     msg = paste0("'", bin_members_colnam ...
R/make.pseudobulk.counts.R#L92       stop("Invalid cluster_count_by val ...
R/make.pseudobulk.counts.R#L105   scmpObject@compress.sce@assays@data@li ...
R/optimize.bin.max.R#L3 #' Adjust the bins of a dataframe based  ...
R/optimize.bin.max.R#L5 #' If a bin is too large, it will be spl ...
R/optimize.bin.max.R#L12 #' @param time_vector A vector represent ...
R/optimize.bin.max.R#L17 #' @param method The method for handling ...
R/optimize.bin.max.R#L19 #' @param drop The threshold below which ...
R/optimize.bin.max.R#L21 #' @return A dataframe with adjusted bin ...
R/optimize.bin.max.R#L42       pTime.for.big.interval <- time_vec ...
R/optimize.bin.max.R#L46         time_vector = pTime.for.big.inte ...
R/optimize.bin.max.R#L58         message(paste("Splitting bin wit ...
R/sc.get.siggenes.R#L1 #' @title Extract significant genes for  ...
R/sc.get.siggenes.R#L9 #' @param rsq Cut-off level at the R-squ ...
R/sc.get.siggenes.R#L12 #' @param vars Variables for which to ex ...
R/sc.get.siggenes.R#L14 #'   \item \code{"all"}: generates one s ...
R/sc.get.siggenes.R#L15 #'   \item \code{"each"}: generates as m ...
R/sc.get.siggenes.R#L16 #'   \item \code{"groups"}: generates a  ...
R/sc.get.siggenes.R#L18 #' @param significant.intercept Experime ...
R/sc.get.siggenes.R#L21 #' Refer to the function description for ...
R/sc.get.siggenes.R#L25 #'   \item \code{summary}: A vector or m ...
R/sc.get.siggenes.R#L26 #'   \item \code{sig.genes}: A list with ...
R/sc.get.siggenes.R#L30 #'       \item{\code{coefficients}:}{Reg ...
R/sc.get.siggenes.R#L31 #'       \item{\code{group.coeffs}:}{Reg ...
R/sc.get.siggenes.R#L32 #'       \item{\code{sig.pvalues}:}{P-va ...
R/sc.get.siggenes.R#L40 #' maSigPro: a Method to Identify Signif ...
R/sc.get.siggenes.R#L41 #' Bioinformatics, 22(9), 1096-1102. \ur ...
R/sc.get.siggenes.R#L67     coefficients = showCoeff(scmpObj, re ...
R/sc.get.siggenes.R#L68     sig.profiles = showSigProf(scmpObj,  ...
R/sc.make.design.matrix.R#L3 #' This function creates a design matrix ...
R/sc.make.design.matrix.R#L4 #' It generates an 'edesignClass' object ...
R/sc.make.design.matrix.R#L21                                   bin_ps ...
R/sc.make.design.matrix.R#L22                                   path_c ...
R/sc.make.design.matrix.R#L33     msg = paste0("'", bin_pseudotime_col ...
R/sc.make.design.matrix.R#L41   com.cell.meta <- comp.cell.metadata[,  ...
R/sc.make.design.matrix.R#L52   com.cell.meta <- com.cell.meta[, colna ...
R/sc.make.design.matrix.R#L55   col.vec <- colnames(com.cell.meta)[col ...
R/sc.p.vector.class.R#L1 #' A class to store regression fit resul ...
R/sc.p.vector.class.R#L3 #' The scPVectorClass is designed to hol ...
R/sc.p.vector.class.R#L4 #' It contains slots to store various re ...
R/sc.p.vector.class.R#L5 #' number of input genes, number of gene ...
R/sc.p.vector.class.R#L6 #' microarray experiments and identifyin ...
R/sc.p.vector.class.R#L11 #' @slot FDR P-value at FDR \code{Q} con ...
R/sc.p.vector.class.R#L27 #' ## one control plus 3 treatments, 3 t ...
R/sc.p.vector.class.R#L40     SELEC = "dgCMatrix", # Matrix contai ...
R/sc.p.vector.class.R#L43     FDR = "numeric", # P-value at FDR Q  ...
R/sc.p.vector.class.R#L87     SELEC = as(matrix(NA, nrow = 0, ncol ...
R/sc.p.vector.R#L3 #' \code{sc.p.vector} performs a regress ...
R/sc.p.vector.R#L6 #' @param scmpObj matrix containing norm ...
R/sc.p.vector.R#L8 #' @param MT.adjust argument to pass to  ...
R/sc.p.vector.R#L9 #' @param min.obs genes with less than t ...
R/sc.p.vector.R#L10 #'   Minimum value to estimate the model ...
R/sc.p.vector.R#L12 #'   It must be specified as a function: ...
R/sc.p.vector.R#L13 #'   If NULL, the family will be \code{n ...
R/sc.p.vector.R#L14 #' @param epsilon argument to pass to \c ...
R/sc.p.vector.R#L15 #' @param verbose Name of the analyzed i ...
R/sc.p.vector.R#L24 #' @details \code{rownames(design)} and  ...
R/sc.p.vector.R#L25 #'   and indicate array naming. \code{ro ...
R/sc.p.vector.R#L26 #'   \code{colnames(design)} are the giv ...
R/sc.p.vector.R#L33 #' \item{FDR}{p-value at FDR \code{Q} co ...
R/sc.p.vector.R#L40 #' maSigPro: a Method to Identify Signif ...
R/sc.p.vector.R#L50 #' ## one control plus 3 treatments, 3 t ...
R/sc.p.vector.R#L64                         family = negativ ...
R/sc.p.vector.R#L65                         verbose = TRUE,  ...
R/sc.p.vector.R#L79   # Convert 'scmpObj' to matrix and sele ...
R/sc.p.vector.R#L89   # assert_that((dat@Dim[1] > 1), msg =  ...
R/sc.p.vector.R#L90   assert_that((nrow(dat) > 1), msg = pas ...
R/sc.p.vector.R#L94   #     message(paste("After filtering w ...
R/sc.p.vector.R#L142       weight_df <- log(compressed.data[, ...
R/sc.p.vector.R#L161   p.vector.list <- mclapply(1:g, functio ...
R/sc.p.vector.R#L221   p.adjusted <- unlist(p.adjust(sc.p.vec ...
R/sc.path.intersection.R#L3 #' This function takes a Single Cell Mul ...
R/sc.path.intersection.R#L4 #' significant genes for each pathway, a ...
R/sc.path.intersection.R#L6 #' @param scmpObj An object of class SCM ...
R/sc.path.intersection.R#L9 #' @return An UpSet plot visualizing the ...
R/sc.path.intersection.R#L13 #' # Assuming 'scmp_object' is a pre-pro ...
R/sc.plot.bins.bar.R#L3 #' This function generates plots to visu ...
R/sc.plot.bins.bar.R#L4 #' It produces a bar plot and, optionall ...
R/sc.plot.bins.bar.R#L7 #' @param scmpObj A SingleCellExperiment ...
R/sc.plot.bins.bar.R#L8 #' @param path_colname A logical flag in ...
R/sc.plot.bins.bar.R#L12 #' @return A bar plot and, optionally, a ...
R/sc.plot.bins.bar.R#L13 #' If add_tile is TRUE, returns a combin ...
R/sc.plot.bins.bar.R#L19                              bin_size_co ...
R/sc.plot.bins.bar.R#L20                              bin_pseudot ...
R/sc.plot.bins.bar.R#L40   conesa_colors <- getConesaColors()[c(T ...
R/sc.plot.bins.bar.R#L54     geom_line(aes(group = .data$path, co ...
R/sc.plot.bins.tile.R#L3 #' This function generates plots to visu ...
R/sc.plot.bins.tile.R#L4 #' It produces a bar plot and, optionall ...
R/sc.plot.bins.tile.R#L7 #' @param scmpObj A SingleCellExperiment ...
R/sc.plot.bins.tile.R#L8 #' @param path_colname A logical flag in ...
R/sc.plot.bins.tile.R#L12 #' @return A bar plot and, optionally, a ...
R/sc.plot.bins.tile.R#L13 #' If add_tile is TRUE, returns a combin ...
R/sc.plot.bins.tile.R#L19                               bin_size_c ...
R/sc.plot.bins.tile.R#L20                               bin_pseudo ...
R/sc.plot.bins.tile.R#L40   conesa_colors <- getConesaColors()[c(T ...
R/sc.PlotGroups.R#L3 #' This function generates plots based o ...
R/sc.PlotGroups.R#L65     path.names <- unique(scmpObj@compres ...
R/sc.PlotGroups.R#L87       time <- edesign.frame[edesign.fram ...
R/sc.PlotGroups.R#L107     xlim <- c(min(points.df[[pooled.time ...
R/sc.PlotGroups.R#L108     # ylim <- c(min(as.numeric(points.df ...
R/sc.PlotGroups.R#L112     conesa_colors <- getConesaColors()[c ...
R/sc.PlotGroups.R#L136       geom_point(data = points.df, aes(x ...
R/sc.PlotGroups.R#L137       geom_line(data = points.df, aes(x  ...
R/sc.PlotGroups.R#L138       geom_line(data = curve.df, aes(x = ...
R/sc.PlotGroups.R#L141         subtitle = paste("R2:", round(da ...
R/sc.PlotGroups.R#L148         panel.grid.major = element_line( ...
R/sc.PlotGroups.R#L151       scale_x_continuous(breaks = seq(mi ...
R/sc.stepback.R#L1 sc.stepback <- function(y = y, d = d, al ...
R/sc.stepback.R#L2   lm1 <- glm(y ~ ., data = d, family = f ...
R/sc.stepback.R#L8       lm1 <- glm(y ~ 1, family = family, ...
R/sc.stepback.R#L20       lastname <- names(result$coefficie ...
R/sc.stepback.R#L26     lm1 <- glm(y ~ ., data = d, family = ...
R/sc.stepback.R#L33         lm1 <- glm(y ~ 1, family = famil ...
R/sc.stepfor.R#L1 sc.stepfor <- function(y = y, d = d, alf ...
R/sc.stepfor.R#L5   resul0 <- summary(glm(y ~ ., data = d, ...
R/sc.stepfor.R#L10     lm2 <- glm(y ~ ., data = sub, family ...
R/sc.stepfor.R#L38         lm2 <- glm(y ~ ., data = sub, fa ...
R/sc.stepfor.R#L48     lm1 <- glm(y ~ 1, family = family, e ...
R/sc.stepfor.R#L50     lm1 <- glm(y ~ ., data = design, fam ...
R/sc.T.fit.R#L3 #' \code{T.fit} selects the best regress ...
R/sc.T.fit.R#L5 #' @param scmpObj Can either be a \code{ ...
R/sc.T.fit.R#L7 #' @param step.method Argument to be pas ...
R/sc.T.fit.R#L8 #' @param Q Significance level used for  ...
R/sc.T.fit.R#L9 #' @param nvar.correction Argument for c ...
R/sc.T.fit.R#L10 #' @param family The distribution functi ...
R/sc.T.fit.R#L11 #' @param epsilon Argument to pass to \c ...
R/sc.T.fit.R#L12 #' @param verbose Name of the analyzed i ...
R/sc.T.fit.R#L22 #' In the maSigPro approach, \code{\link ...
R/sc.T.fit.R#L23 #' first selected based on a general mod ...
R/sc.T.fit.R#L25 #' The step regression can be \code{"bac ...
R/sc.T.fit.R#L26 #' model with all or none variables. Wit ...
R/sc.T.fit.R#L27 #' At each step, the p-value of each var ...
R/sc.T.fit.R#L28 #' lower or higher than the given thresh ...
R/sc.T.fit.R#L32 #' \item{sol}{Matrix for summary results ...
R/sc.T.fit.R#L38 #' \item{coefficients}{Matrix containing ...
R/sc.T.fit.R#L39 #' \item{group.coeffs}{Matrix containing ...
R/sc.T.fit.R#L50 #' maSigPro: a Method to Identify Signif ...
R/sc.T.fit.R#L84   groups.vector <- c(groups.vector[nchar ...
R/sc.T.fit.R#L110     weight_df <- log(compressed.data[, c ...
R/sc.T.fit.R#L163     result_list <- parallel::mclapply(na ...
R/sc.T.fit.R#L164       # result_list <- lapply(names(y_in ...
R/sc.T.fit.R#L166       reg_scmpObj <- sc.stepback(y = y,  ...
R/sc.T.fit.R#L167       lmf_scmpObj <- glm(y ~ ., data = a ...
R/sc.T.fit.R#L168       model.glm.0_scmpObj <- glm(y ~ 1,  ...
R/sc.T.fit.R#L177       return(extract_fitting(reg = reg_s ...
R/sc.T.fit.R#L186     result_list <- parallel::mclapply(na ...
R/sc.T.fit.R#L188       reg_scmpObj <- sc.stepfor(y = y, d ...
R/sc.T.fit.R#L189       lmf_scmpObj <- glm(y ~ ., data = a ...
R/sc.T.fit.R#L190       model.glm.0_scmpObj <- glm(y ~ 1,  ...
R/sc.T.fit.R#L199       return(extract_fitting(reg = reg_s ...
R/sc.T.fit.R#L202     result_list <- parallel::mclapply(na ...
R/sc.T.fit.R#L204       reg_scmpObj <- sc.two.ways.stepbac ...
R/sc.T.fit.R#L205       lmf_scmpObj <- glm(y ~ ., data = a ...
R/sc.T.fit.R#L206       model.glm.0_scmpObj <- glm(y ~ 1,  ...
R/sc.T.fit.R#L215       return(extract_fitting(reg = reg_s ...
R/sc.T.fit.R#L219     result_list <- parallel::mclapply(na ...
R/sc.T.fit.R#L221       reg_scmpObj <- sc.two.ways.stepfor ...
R/sc.T.fit.R#L222       lmf_scmpObj <- glm(y ~ ., data = a ...
R/sc.T.fit.R#L223       model.glm.0_scmpObj <- glm(y ~ 1,  ...
R/sc.T.fit.R#L232       return(extract_fitting(reg = reg_s ...
R/sc.T.fit.R#L235     stop("stepwise method must be one of ...
R/sc.T.fit.R#L259   influ.info.list <- influ.info.list[!sa ...
R/sc.T.fit.R#L301           B <- reg.coeffs(coefficients = ...
R/sc.T.fit.R#L317       message(paste("\nInfluence:", ncol ...
R/sc.two.ways.stepback.R#L2   function(y = y, d = d, alfa = 0.05, fa ...
R/sc.two.ways.stepback.R#L4     lm1 <- glm(y ~ ., data = d, family = ...
R/sc.two.ways.stepback.R#L28         lm2 <- glm(y ~ ., data = sub, fa ...
R/sc.two.ways.stepback.R#L57           lm2 <- glm(y ~ ., data = sub,  ...
R/sc.two.ways.stepback.R#L71       lm1 <- glm(y ~ ., data = d, family ...
R/sc.two.ways.stepback.R#L78           lm1 <- glm(y ~ 1, family = fam ...
R/sc.two.ways.stepfor.R#L2   function(y = y, d = d, alfa = 0.05, fa ...
R/sc.two.ways.stepfor.R#L6     resul0 <- summary(glm(y ~ ., data =  ...
R/sc.two.ways.stepfor.R#L11       lm2 <- glm(y ~ ., data = sub, fami ...
R/sc.two.ways.stepfor.R#L32       result2 <- summary(glm(y ~ ., data ...
R/sc.two.ways.stepfor.R#L52         result2 <- summary(glm(y ~ ., da ...
R/sc.two.ways.stepfor.R#L63         lm2 <- glm(y ~ ., data = sub, fa ...
R/sc.two.ways.stepfor.R#L78       lm1 <- glm(y ~ 1, family = family, ...
R/sc.two.ways.stepfor.R#L80       lm1 <- glm(y ~ ., data = design, f ...
R/scmpClass.R#L6 #' @slot sce Object of Class SingleCellE ...
R/scmpClass.R#L7 #' @slot scPVector Object of Class scPVe ...
R/scmpClass.R#L8 #' @slot scTFit Object of Class scTFitCl ...
R/scmpClass.R#L10 #' @slot edesign Object of Class edesign ...
R/scmpClass.R#L11 #' @slot addParams Object of Class addPa ...
R/scmpClass.R#L88     scPVector = new("scPVectorClass"), # ...
R/scmpClass.R#L89     scTFit = new("scTFitClass"), # Assum ...
R/scmpClass.R#L90     addParams = new("addParamClass"), #  ...
R/scmpClass.R#L96 scMaSigProClass <- function(sce = new("S ...
R/scmpShow.R#L3 #' This method displays basic informatio ...
R/scmpShow.R#L4 #' is printed in the console. The method ...
R/scmpShow.R#L18   cat("Pseudotime Range:", paste(range(c ...
R/scmpShow.R#L23     cat(paste("\nPaths:", paste(levels(a ...
R/scmpShow.R#L25       "\nBinned Pseudotime: ", paste(ran ...
R/scmpShow.R#L26       round(mean(compressed.cell.metadat ...
R/scmpShow.R#L30     per_path_num_bin <- extract_info(com ...
R/scmpShow.R#L31     per_path_bin_size <- round(extract_i ...
R/scmpShow.R#L34     cat("\nAverage bin Size->", paste(na ...
R/scmpShow.R#L35     cat("\nNumber of bins->", paste(name ...
R/scmpShow.R#L41     nSigs <- length(object@scPVector@p.a ...
R/scmpShow.R#L56 extract_info <- function(data, return_ty ...
R/scTFitClass.R#L12 #' @slot coefficients A data frame conta ...
R/scTFitClass.R#L13 #' @slot group.coeffs A matrix with the  ...
R/scTFitClass.R#L14 #' @slot t.score A data frame containing ...
R/scTFitClass.R#L15 #' @slot variables A character vector co ...
R/selectPath.m3.R#L3 #' @param cdsObj An cdsObject of class ` ...
R/selectPath.m3.R#L31   assert_that(nrow(as.data.frame(reduced ...
R/selectPath.m3.R#L32     msg = paste("Dimensions of", redDim, ...
R/selectPath.m3.R#L52   assert_that(!is.null(cdsObj@principal_ ...
R/selectPath.m3.R#L57   assert_that(!is.null(cdsObj@principal_ ...
R/selectPath.m3.R#L63     Pseudotime = cdsObj@principal_graph_ ...
R/selectPath.m3.R#L64     cell = names(cdsObj@principal_graph_ ...
R/selectPath.m3.R#L69     node = paste("Y", cdsObj@principal_g ...
R/selectPath.m3.R#L70     cell = names(cdsObj@principal_graph_ ...
R/selectPath.m3.R#L81     msg = paste("Cells in lower dimensio ...
R/selectPath.m3.R#L103   assert_that(!is.null(cdsObj@principal_ ...
R/selectPath.m3.R#L108   pgraph.coords <- as.data.frame(t(cdsOb ...
R/selectPath.m3.R#L116     numPartitions <- c(1:(length(unique( ...
R/selectPath.m3.R#L133   colnames(trajectory.df) <- c("from", " ...
R/selectPath.m3.R#L161     vertex.relation.frame.sub <- vertex. ...
R/selectPath.m3.R#L169     cell.metadata.sub <- cell.metadata[r ...
R/selectPath.m3.R#L184     path1_cells <- vertex.relation.frame ...
R/selectPath.m3.R#L185     path2_cells <- vertex.relation.frame ...
R/selectPath.m3.R#L186     # root_cells <- vertex.relation.fram ...
R/selectPath.m3.R#L189     cell.metadata.sub[rownames(cell.meta ...
R/selectPath.m3.R#L190     cell.metadata.sub[rownames(cell.meta ...
R/selectPath.m3.R#L192     cell.metadata.sub <- cell.metadata.s ...
R/selectPath.m3.R#L193     # cell.metadata.sub[rownames(cell.me ...
R/selectPath.m3.R#L196     anno.df.sub <- anno.df[anno.df$cell  ...
R/selectPath.m3.R#L201     rawCounts <- rawCounts[, colnames(ra ...
R/selectShortPath.R#L16 #'   \item \code{short_vec_label}: The l ...
R/shinySelection.R#L8 #' @importFrom shiny observeEvent render ...
R/shinySelection.R#L9 #' @importFrom shiny reactiveVal titlePa ...
R/shinySelection.R#L10 #' @importFrom shiny fluidRow column uiO ...
R/shinySelection.R#L11 #' @importFrom shiny modalButton tagList ...
R/shinySelection.R#L13 #' @importFrom plotly ggplotly layout pl ...
R/shinySelection.R#L28         h4(paste("Interactively Select B ...
R/shinySelection.R#L39         h5("Select atleast 3 nodes (incl ...
R/shinySelection.R#L53           column(6, h3("Monocle3-Prinicp ...
R/shinySelection.R#L54           column(6, uiOutput("m3PgrapSub ...
R/shinySelection.R#L63           column(3, sliderInput("trPlotN ...
R/shinySelection.R#L64           column(3, sliderInput("trPlotC ...
R/shinySelection.R#L65           column(3, sliderInput("trPlotC ...
R/shinySelection.R#L66           column(3, sliderInput("trPlotS ...
R/shinySelection.R#L69           column(3, sliderInput("trPlotN ...
R/shinySelection.R#L70           column(3, sliderInput("trPlotC ...
R/shinySelection.R#L100           label_coords$path1_high <- ife ...
R/shinySelection.R#L106           label_coords$path2_high <- ife ...
R/shinySelection.R#L112           label_coords$root_high <- ifel ...
R/shinySelection.R#L129           showNotification("This dataset ...
R/shinySelection.R#L132         if (all(c("path1_high", "path2_h ...
R/shinySelection.R#L135               data = annotation_data, ae ...
R/shinySelection.R#L138             geom_segment(data = trajecto ...
R/shinySelection.R#L140               data = label_coords, aes(x ...
R/shinySelection.R#L142                 ifelse(label_coords$path ...
R/shinySelection.R#L149             geom_text(data = label_coord ...
R/shinySelection.R#L154           ggplotly(trajectory.map, sourc ...
R/shinySelection.R#L165         lasso_data <- lasso_data[lasso_d ...
R/shinySelection.R#L178           showNotification(paste("Select ...
R/shinySelection.R#L180           showNotification(paste("Please ...
R/shinySelection.R#L192         return(paste0("Selected Path1 No ...
R/shinySelection.R#L196         return(paste0("Selected Path2 No ...
R/shinySelection.R#L203         lasso_data <- lasso_data[lasso_d ...
R/shinySelection.R#L214             showNotification(paste("Plea ...
R/shinySelection.R#L222               showNotification(paste("Se ...
R/shinySelection.R#L224               showNotification(paste("Ro ...
R/shinySelection.R#L228           showNotification(paste("Please ...
R/shinySelection.R#L235         lasso_data <- lasso_data[lasso_d ...
R/shinySelection.R#L246             showNotification(paste("Plea ...
R/shinySelection.R#L253                 showNotification(paste(" ...
R/shinySelection.R#L255                 showNotification(paste(" ...
R/shinySelection.R#L258               showNotification(paste("Ro ...
R/shinySelection.R#L262           showNotification(paste("Please ...
R/shinySelection.R#L269         if (length(path1()) > 2 & length ...
R/shinySelection.R#L298         trajectory_data_sub_tmp <- traje ...
R/shinySelection.R#L299         trajectory_data_sub <- trajector ...
R/shinySelection.R#L302         annotation_data_sub <- annotatio ...
R/shinySelection.R#L305         label_coords_sub <- label_coords ...
R/shinySelection.R#L308           label_coords_sub$path1_high <- ...
R/shinySelection.R#L309           label_coords_sub$path2_high <- ...
R/shinySelection.R#L310           label_coords_sub$root_high <-  ...
R/shinySelection.R#L321             data = annotation_data_sub,  ...
R/shinySelection.R#L324           geom_segment(data = trajectory ...
R/shinySelection.R#L326             data = label_coords_sub, aes ...
R/shinySelection.R#L328               ifelse(label_coords_sub$pa ...
R/shinySelection.R#L335           geom_text(data = label_coords_ ...
R/shinySelection.R#L346         if (length(path1()) > 2 & length ...
R/shinySelection.R#L348           selected_paths(list(root = roo ...
R/showCoeff.R#L3 #' This function is used to view or retu ...
R/showCoeff.R#L5 #' @param scmpObj an object of class 'sc ...
R/showCoeff.R#L6 #' @param view logical, whether to view  ...
R/showCoeff.R#L8 #' @param return logical, whether to ret ...
R/showGroupCoeff.R#L3 #' This function is used to view or retu ...
R/showGroupCoeff.R#L5 #' @param scmpObj an object of class 'sc ...
R/showGroupCoeff.R#L6 #' @param view logical, whether to view  ...
R/showGroupCoeff.R#L7 #' @param return logical, whether to ret ...
R/showInflu.R#L3 #' This function is used to view or retu ...
R/showInflu.R#L5 #' @param scmpObj an object of class 'sc ...
R/showInflu.R#L6 #' @param view logical, whether to view  ...
R/showInflu.R#L7 #' @param return logical, whether to ret ...
R/showParams.R#L3 #' This function is used to view or retu ...
R/showParams.R#L5 #' @param scmpObj an object of class 'sc ...
R/showParams.R#L6 #' @param view logical, whether to view  ...
R/showParams.R#L7 #' @param return logical, whether to ret ...
R/showParams.R#L32   # Get all slots of 'addParams', assumi ...
R/showParams.R#L54 # You might need to load necessary packa ...
R/showSigProf.R#L3 #' This function is used to view or retu ...
R/showSigProf.R#L5 #' @param scmpObj an object of class 'sc ...
R/showSigProf.R#L6 #' @param view logical, whether to view  ...
R/showSigProf.R#L7 #' @param influ logical, whether to add  ...
R/showSigProf.R#L8 #' @param return logical, whether to ret ...
R/showSigProf.R#L33   sol <- showSol(scmpObj, view = FALSE,  ...
R/showSigProf.R#L36   bulk.counts <- bulk.counts[rownames(bu ...
R/showTS.R#L3 #' This function is used to view or retu ...
R/showTS.R#L5 #' @param scmpObj an object of class 'sc ...
R/showTS.R#L6 #' @param view logical, whether to view  ...
R/showTS.R#L7 #' @param influ logical, whether to add  ...
R/showTS.R#L8 #' @param return logical, whether to ret ...
R/Sim2Path.R#L4 #' A small simulated SingleCellExperimen ...
R/Sim2Path.R#L5 #' contains 200 cells and 500 genes. The ...
R/solShow.R#L3 #' This function is used to view or retu ...
R/solShow.R#L5 #' @param scmpObj an object of class 'sc ...
R/solShow.R#L6 #' @param view logical, whether to view  ...
R/solShow.R#L7 #' @param influ logical, whether to add  ...
R/solShow.R#L8 #' @param return logical, whether to ret ...
R/squeeze.R#L9 #' @param scmpObject object of Class scM ...
R/squeeze.R#L12 #' Pseudotime values. Generated using `c ...
R/squeeze.R#L17 #' @param bin_pseudotime_colname Name of ...
R/squeeze.R#L19 #' @param bin_members_colname Name of th ...
R/squeeze.R#L24 #' "Sqrt", "Sturges", "Rice", "Doane", a ...
R/squeeze.R#L26 #' @param drop.fac A numeric value speci ...
R/squeeze.R#L27 #' number of bins if the initial binning ...
R/squeeze.R#L29 #' per path iteratively. Options: "unive ...
R/squeeze.R#L30 #' @param additional_params Pass additio ...
R/squeeze.R#L31 #' @param assay_name Name of the Assay i ...
R/squeeze.R#L38 #' aggregate counts within each cluster. ...
R/squeeze.R#L50 #' - Adds a new column 'cell' to the inp ...
R/squeeze.R#L51 #' - Extracts the time series data from  ...
R/squeeze.R#L54 #' - Discretizes the time series data in ...
R/squeeze.R#L56 #' - Removes the 'cell' column and sets  ...
R/squeeze.R#L70 #' @importFrom dplyr left_join join_by m ...
R/squeeze.R#L77 #' @seealso \code{\link{estBinSize}}, \c ...
R/squeeze.R#L82                     pseudotime_colname = ...
R/squeeze.R#L117   raw_cell_metadata <- raw_cell_metadata ...
R/squeeze.R#L129     msg = paste0("'", pseudotime_colname ...
R/squeeze.R#L132     msg = paste0("'", path_colname, "' d ...
R/squeeze.R#L139       bin_method %in% c("Freedman.Diacon ...
R/squeeze.R#L141     msg = "Available binning methods are ...
R/squeeze.R#L162     msg = "Invalid number of paths detec ...
R/squeeze.R#L167     message(paste("Number of available p ...
R/squeeze.R#L173   discrete.list <- lapply(avail.paths, f ...
R/squeeze.R#L174                                          ...
R/squeeze.R#L175                                          ...
R/squeeze.R#L176                                          ...
R/squeeze.R#L177                                          ...
R/squeeze.R#L178                                          ...
R/squeeze.R#L179                                          ...
R/squeeze.R#L180                                          ...
R/squeeze.R#L234         "For", path, ",", length_n, "tim ...
R/squeeze.R#L252         message(paste("Optimizing bin si ...
R/squeeze.R#L284       message(paste("Optimizing bin size ...
R/squeeze.R#L289         "Finally, for", path, ",", lengt ...
R/squeeze.R#L300       # print(paste("Completed raw_i <-  ...
R/squeeze.R#L306       # print(paste("Completed pseudotim ...
R/squeeze.R#L309       if (pseudotime_i >= min(bin_table[ ...
R/squeeze.R#L325         matching_bins <- bin_table[bin_t ...
R/squeeze.R#L327         matching_bins <- bin_table[bin_t ...
R/squeeze.R#L333           path.frame[i, bin_pseudotime_c ...
R/squeeze.R#L335           path.frame[i, bin_pseudotime_c ...
R/squeeze.R#L342     processed.path.frame <- processed.pa ...
R/squeeze.R#L349     # print(paste("rownames(processed.pa ...
R/squeeze.R#L356       summarise(!!sym(bin.members.colnam ...
R/squeeze.R#L364     tmp.bin.size <- apply(binned.path.fr ...
R/squeeze.R#L371     binned.path.frame <- merge(binned.pa ...
R/squeeze.R#L383   processed_binned_cell_metadata.list <- ...
R/squeeze.R#L390   processed_binned_cell_metadata <- bind ...
R/squeeze.R#L401   rownames(processed_binned_cell_metadat ...
R/squeeze.R#L408     processed_binned_cell_metadata <- pr ...
R/squeeze.R#L416       binned.path.frame <- processed_bin ...
R/squeeze.R#L458         message(paste("Dropped trailing  ...
R/squeeze.R#L462     # Filter out rows where 'scmp_binned ...
R/squeeze.R#L469   compressed.sce <- SingleCellExperiment ...
man/addParamClass-class.Rd#L14 \item{\code{bin_pseudotime_colname}}{A c ...
man/addParamClass-class.Rd#L16 \item{\code{path_prefix}}{A character re ...
man/addParamClass-class.Rd#L18 \item{\code{root_label}}{A character rep ...
man/addParamClass-class.Rd#L20 \item{\code{pseudotime_colname}}{A chara ...
man/addParamClass-class.Rd#L22 \item{\code{bin_method}}{A character rep ...
man/addParamClass-class.Rd#L24 \item{\code{path_colname}}{A character r ...
man/addParamClass-class.Rd#L26 \item{\code{bin_colname}}{A character re ...
man/addParamClass-class.Rd#L28 \item{\code{bin_size_colname}}{A charact ...
man/addParamClass-class.Rd#L30 \item{\code{bin_members_colname}}{A char ...
man/addParamClass-class.Rd#L34 \item{\code{min.obs}}{Minimum value to e ...
man/addParamClass-class.Rd#L42 \item{\code{step.method}}{A character sp ...
man/addParamClass-class.Rd#L44 \item{\code{useWeights}}{A logical speci ...
man/align.pseudotime.Rd#L17 Pseudotime values. It is generated using ...
man/align.pseudotime.Rd#L21 for Path. It is generated using `colData ...
man/annotate_monocle3_cds.Rd#L41 `annotate_monocle3_cds()` annotates the  ...
man/annotate_monocle3_cds.Rd#L65 \code{\link[igraph]{shortest_paths}}, `c ...
man/annotate_sce.Rd#L5 \title{Annotate 'SingleCellExperiment' c ...
man/annotate_sce.Rd#L67 SingleCellExperiment class object, `colD ...
man/as_scmp.Rd#L22 \item{object}{An S4 object of class `cds ...
man/as_scmp.Rd#L32 Pseudotime values. It is generated using ...
man/as_scmp.Rd#L38 for Path. It is generated using `colData ...
man/as_scmp.Rd#L53 `as_scmp()` converts a cds/CellDataSet o ...
man/create_range.Rd#L17   \item{bin}{A factor column representin ...
man/create_scmpObj.Rd#L29 \item{pseudotime_colname}{A character st ...
man/create_scmpObj.Rd#L31 \item{path_colname}{A character string s ...
man/create_scmpObj.Rd#L33 \item{use_as_bin}{A logical indicating w ...
man/create_scmpObj.Rd#L36 A scMaSigProClass object containing the  ...
man/create_scmpObj.Rd#L44 # Assuming you have 'counts_matrix', 'ce ...
man/dot-smsp_show.Rd#L13 This method displays basic information a ...
man/dot-smsp_show.Rd#L14 is printed in the console. The method is ...
man/estBinSize.Rd#L10 \item{time_vector}{A numeric vector. The ...
man/estBinSize.Rd#L14 \item{drop_fac}{A numeric. A factor to a ...
man/estBinSize.Rd#L16 \item{bin_method}{A character string. Th ...
man/estBinSize.Rd#L22 This function calculates the optimal bin ...
man/estBinSize.Rd#L26 - "Freedman.Diaconis": bin size is propo ...
man/estBinSize.Rd#L27 - "Sqrt": bin size is proportional to th ...
man/estBinSize.Rd#L28 - "Sturges": bin size is proportional to ...
man/estBinSize.Rd#L29 - "Rice": bin size is proportional to tw ...
man/estBinSize.Rd#L31 - "Scott.Normal": bin size is proportion ...
man/estBinSize.Rd#L33 After estimating the bin size, it is sca ...
man/estBinSize.Rd#L37 estBinSize(time_vector = c(1, 2, 3, 4, 5 ...
man/make.pseudobulk.counts.Rd#L20 storing information about the members of ...
man/make.pseudobulk.counts.Rd#L25 \item{assay_name}{Name of the Assay in t ...
man/make.pseudobulk.counts.Rd#L29 aggregate counts within each cluster. Av ...
man/make.pseudobulk.counts.Rd#L32 A data.frame. The data frame includes ps ...
man/make.pseudobulk.counts.Rd#L35 `make.pseudobulk.counts()` creates a dat ...
man/make.pseudobulk.counts.Rd#L41 counts (depending on the specified metho ...
man/make.pseudobulk.counts.Rd#L42 The result is a pseudo bulk counts data  ...
man/optimize.bin.max.Rd#L35 \item{method}{The method for handling sm ...
man/optimize.bin.max.Rd#L38 \item{drop}{The threshold below which a  ...
man/optimize.bin.max.Rd#L43 A dataframe with adjusted bins. The stru ...
man/sc.get.siggenes.Rd#L5 \title{Extract significant genes for set ...
man/sc.get.siggenes.Rd#L19 \item{rsq}{Cut-off level at the R-square ...
man/sc.get.siggenes.Rd#L21 \item{vars}{Variables for which to extra ...
man/sc.get.siggenes.Rd#L23   \item \code{"all"}: generates one sing ...
man/sc.get.siggenes.Rd#L24   \item \code{"each"}: generates as many ...
man/sc.get.siggenes.Rd#L25   \item \code{"groups"}: generates a sig ...
man/sc.get.siggenes.Rd#L28 \item{significant.intercept}{Experimenta ...
man/sc.get.siggenes.Rd#L36   \item \code{summary}: A vector or matr ...
man/sc.get.siggenes.Rd#L37   \item \code{sig.genes}: A list with de ...
man/sc.get.siggenes.Rd#L41       \item{\code{coefficients}:}{Regres ...
man/sc.get.siggenes.Rd#L42       \item{\code{group.coeffs}:}{Regres ...
man/sc.get.siggenes.Rd#L43       \item{\code{sig.pvalues}:}{P-value ...
man/sc.get.siggenes.Rd#L62 maSigPro: a Method to Identify Significa ...
man/sc.get.siggenes.Rd#L63 Bioinformatics, 22(9), 1096-1102. \url{h ...
man/sc.make.design.matrix.Rd#L27 This function creates a design matrix us ...
man/sc.make.design.matrix.Rd#L28 It generates an 'edesignClass' object wh ...
man/sc.p.vector.Rd#L27 \item{scmpObj}{matrix containing normali ...
man/sc.p.vector.Rd#L31 \item{MT.adjust}{argument to pass to \co ...
man/sc.p.vector.Rd#L33 \item{min.obs}{genes with less than this ...
man/sc.p.vector.Rd#L37 It must be specified as a function: \cod ...
man/sc.p.vector.Rd#L38 If NULL, the family will be \code{negati ...
man/sc.p.vector.Rd#L40 \item{epsilon}{argument to pass to \code ...
man/sc.p.vector.Rd#L42 \item{verbose}{Name of the analyzed item ...
man/sc.p.vector.Rd#L66 \item{FDR}{p-value at FDR \code{Q} contr ...
man/sc.p.vector.Rd#L73 \code{sc.p.vector} performs a regression ...
man/sc.p.vector.Rd#L78   and indicate array naming. \code{rowna ...
man/sc.p.vector.Rd#L79   \code{colnames(design)} are the given  ...
man/sc.p.vector.Rd#L91 maSigPro: a Method to Identify Significa ...
man/sc.path.intersection.Rd#L10 \item{scmpObj}{An object of class SCMP,  ...
man/sc.path.intersection.Rd#L14 An UpSet plot visualizing the intersecti ...
man/sc.path.intersection.Rd#L17 This function takes a Single Cell MultiP ...
man/sc.path.intersection.Rd#L18 significant genes for each pathway, and  ...
man/sc.path.intersection.Rd#L22 # Assuming 'scmp_object' is a pre-proces ...
man/sc.plot.bins.bar.Rd#L15 \item{scmpObj}{A SingleCellExperiment ob ...
man/sc.plot.bins.bar.Rd#L17 \item{path_colname}{A logical flag indic ...
man/sc.plot.bins.bar.Rd#L24 A bar plot and, optionally, a tile (heat ...
man/sc.plot.bins.bar.Rd#L25 If add_tile is TRUE, returns a combined  ...
man/sc.plot.bins.bar.Rd#L28 This function generates plots to visuali ...
man/sc.plot.bins.bar.Rd#L29 It produces a bar plot and, optionally,  ...
man/sc.plot.bins.tile.Rd#L15 \item{scmpObj}{A SingleCellExperiment ob ...
man/sc.plot.bins.tile.Rd#L17 \item{path_colname}{A logical flag indic ...
man/sc.plot.bins.tile.Rd#L24 A bar plot and, optionally, a tile (heat ...
man/sc.plot.bins.tile.Rd#L25 If add_tile is TRUE, returns a combined  ...
man/sc.plot.bins.tile.Rd#L28 This function generates plots to visuali ...
man/sc.plot.bins.tile.Rd#L29 It produces a bar plot and, optionally,  ...
man/sc.PlotGroups.Rd#L36 This function generates plots based on v ...
man/sc.T.fit.Rd#L5 \title{Makes a stepwise regression fit f ...
man/sc.T.fit.Rd#L25 \item{scmpObj}{Can either be a \code{\li ...
man/sc.T.fit.Rd#L28 \item{step.method}{Argument to be passed ...
man/sc.T.fit.Rd#L30 \item{Q}{Significance level used for var ...
man/sc.T.fit.Rd#L32 \item{nvar.correction}{Argument for corr ...
man/sc.T.fit.Rd#L34 \item{family}{The distribution function  ...
man/sc.T.fit.Rd#L36 \item{epsilon}{Argument to pass to \code ...
man/sc.T.fit.Rd#L40 \item{verbose}{Name of the analyzed item ...
man/sc.T.fit.Rd#L56 \item{sol}{Matrix for summary results of ...
man/sc.T.fit.Rd#L62 \item{coefficients}{Matrix containing re ...
man/sc.T.fit.Rd#L63 \item{group.coeffs}{Matrix containing th ...
man/sc.T.fit.Rd#L74 \code{T.fit} selects the best regression ...
man/sc.T.fit.Rd#L77 In the maSigPro approach, \code{\link{p. ...
man/sc.T.fit.Rd#L78 first selected based on a general model, ...
man/sc.T.fit.Rd#L80 The step regression can be \code{"backwa ...
man/sc.T.fit.Rd#L81 model with all or none variables. With t ...
man/sc.T.fit.Rd#L82 At each step, the p-value of each variab ...
man/sc.T.fit.Rd#L83 lower or higher than the given threshold ...
man/sc.T.fit.Rd#L87 maSigPro: a Method to Identify Significa ...
man/scMaSigProClass-class.Rd#L15 \item{\code{sce}}{Object of Class Single ...
man/scMaSigProClass-class.Rd#L17 \item{\code{scPVector}}{Object of Class  ...
man/scMaSigProClass-class.Rd#L19 \item{\code{scTFit}}{Object of Class scT ...
man/scMaSigProClass-class.Rd#L23 \item{\code{edesign}}{Object of Class ed ...
man/scMaSigProClass-class.Rd#L25 \item{\code{addParams}}{Object of Class  ...
man/scMaSigProClass-class.Rd#L29 \item{\code{distribution}}{The distribut ...
man/scmp_estimateSizeFactorsForMatrix.Rd#L28 \item{controlGenes}{optional, numeric or ...
man/scmp_estimateSizeFactorsForMatrix.Rd#L48 Love, M.I., Huber, W., Anders, S. Modera ...
man/scPVectorClass-class.Rd#L7 \title{A class to store regression fit r ...
man/scPVectorClass-class.Rd#L9 The scPVectorClass is designed to hold t ...
man/scPVectorClass-class.Rd#L10 It contains slots to store various resul ...
man/scPVectorClass-class.Rd#L11 number of input genes, number of genes t ...
man/scPVectorClass-class.Rd#L12 microarray experiments and identifying s ...
man/scPVectorClass-class.Rd#L17 \item{\code{SELEC}}{dgCMatrix containing ...
man/scPVectorClass-class.Rd#L23 \item{\code{FDR}}{P-value at FDR \code{Q ...
man/scPVectorClass-class.Rd#L29 \item{\code{family}}{Distribution functi ...
man/scTFitClass-class.Rd#L22 \item{\code{coefficients}}{A data frame  ...
man/scTFitClass-class.Rd#L24 \item{\code{group.coeffs}}{A matrix with ...
man/scTFitClass-class.Rd#L26 \item{\code{t.score}}{A data frame conta ...
man/scTFitClass-class.Rd#L28 \item{\code{variables}}{A character vect ...
man/selectPath.m3.Rd#L16 \item{cdsObj}{An cdsObject of class `scM ...
man/showCoeff.Rd#L10 \item{scmpObj}{an object of class 'scMaS ...
man/showCoeff.Rd#L12 \item{view}{logical, whether to view the ...
man/showCoeff.Rd#L14 \item{return}{logical, whether to return ...
man/showCoeff.Rd#L23 This function is used to view or return  ...
man/showGroupCoeff.Rd#L10 \item{scmpObj}{an object of class 'scMaS ...
man/showGroupCoeff.Rd#L12 \item{view}{logical, whether to view the ...
man/showGroupCoeff.Rd#L14 \item{return}{logical, whether to return ...
man/showGroupCoeff.Rd#L21 This function is used to view or return  ...
man/showInflu.Rd#L10 \item{scmpObj}{an object of class 'scMaS ...
man/showInflu.Rd#L12 \item{view}{logical, whether to view the ...
man/showInflu.Rd#L14 \item{return}{logical, whether to return ...
man/showInflu.Rd#L21 This function is used to view or return  ...
man/showParams.Rd#L10 \item{scmpObj}{an object of class 'scMaS ...
man/showParams.Rd#L12 \item{view}{logical, whether to view the ...
man/showParams.Rd#L14 \item{return}{logical, whether to return ...
man/showParams.Rd#L21 This function is used to view or return  ...
man/showSigProf.Rd#L10 \item{scmpObj}{an object of class 'scMaS ...
man/showSigProf.Rd#L12 \item{view}{logical, whether to view the ...
man/showSigProf.Rd#L14 \item{return}{logical, whether to return ...
man/showSigProf.Rd#L16 \item{influ}{logical, whether to add gen ...
man/showSigProf.Rd#L23 This function is used to view or return  ...
man/showSol.Rd#L10 \item{scmpObj}{an object of class 'scMaS ...
man/showSol.Rd#L12 \item{view}{logical, whether to view the ...
man/showSol.Rd#L14 \item{return}{logical, whether to return ...
man/showSol.Rd#L16 \item{influ}{logical, whether to add gen ...
man/showSol.Rd#L23 This function is used to view or return  ...
man/showTS.Rd#L10 \item{scmpObj}{an object of class 'scMaS ...
man/showTS.Rd#L12 \item{view}{logical, whether to view the ...
man/showTS.Rd#L14 \item{return}{logical, whether to return ...
man/showTS.Rd#L16 \item{influ}{logical, whether to add gen ...
man/showTS.Rd#L23 This function is used to view or return  ...
man/sim.sce.Rd#L17 A small simulated SingleCellExperiment O ...
man/squeeze.Rd#L41 "Sqrt", "Sturges", "Rice", "Doane", and  ...
man/squeeze.Rd#L45 number of bins if the initial binning re ...
man/squeeze.Rd#L48 per path iteratively. Options: "universa ...
man/squeeze.Rd#L56 \item{bin_pseudotime_colname}{Name of th ...
man/squeeze.Rd#L63 \item{assay_name}{Name of the Assay in t ...
man/squeeze.Rd#L69 aggregate counts within each cluster. Av ...
man/squeeze.Rd#L73 \item{additional_params}{Pass additional ...
man/squeeze.Rd#L92 - Extracts the time series data from the ...
man/squeeze.Rd#L95 - Discretizes the time series data into  ...
man/squeeze.Rd#L97 - Removes the 'cell' column and sets the ...
vignettes/Basic-Workflow.Rmd#L7   `scMaSigPro` is a Bioconductor package ...
vignettes/Basic-Workflow.Rmd#L8   It builds upon the `maSigPro` package  ...
vignettes/Basic-Workflow.Rmd#L9   branching paths in a pseudotime-ordere ...
vignettes/Basic-Workflow.Rmd#L24 `scMaSigPro` is a polynomial regression- ...
vignettes/Basic-Workflow.Rmd#L43 Here we demonstrate the basic workflow o ...
* NOTE: Consider multiples of 4 spaces for line indents; 1814 lines (28%) are not.
First few lines:
R/addParamClass.R#L34   "addParamClass", ...
R/addParamClass.R#L35   representation( ...
R/addParamClass.R#L58   ), ...
R/addParamClass.R#L59   validity = function(object) { ...
R/addParamClass.R#L64       "bin_pseudotime_colname", "path_pr ...
R/addParamClass.R#L65       "pseudotime_colname", "bin_method" ...
R/addParamClass.R#L66       "path_colname", "bin_colname", "bi ...
R/addParamClass.R#L67       "bin_members_colname", "MT.adjust" ...
R/addParamClass.R#L71       slot_value <- slot(object, slot_na ...
R/addParamClass.R#L72       if (length(slot_value) == 0 || !is ...
R/addParamClass.R#L74       } ...
R/addParamClass.R#L79       stop("Slot 'g' must be an integer. ...
R/addParamClass.R#L85       stop("Slot 'Q' must be numeric.") ...
R/addParamClass.R#L89       stop("Slot 'epsilon' must be numer ...
R/addParamClass.R#L94       stop("Slot 'min.obs' must be an in ...
R/addParamClass.R#L99       slot_value <- slot(object, slot_na ...
R/addParamClass.R#L100       if (length(slot_value) > 1) { # Co ...
R/addParamClass.R#L102       } ...
R/addParamClass.R#L106   }, ...
R/addParamClass.R#L107   prototype = list( ...
R/addParamClass.R#L130   ) ...
R/align.pseudotime.R#L24   # Extract Cell metadata ...
R/align.pseudotime.R#L25   cell.metadata <- scmpObj@sce@colData % ...
R/align.pseudotime.R#L27   # Extract Time and Path info with cell ...
R/align.pseudotime.R#L28   cell.metadata.sub <- cell.metadata[, c ...
R/align.pseudotime.R#L29   cell.metadata.sub$cell <- rownames(cel ...
R/align.pseudotime.R#L31   # Get paths ...
R/align.pseudotime.R#L32   path.vec <- unique(cell.metadata.sub[[ ...
R/align.pseudotime.R#L34   # Get paths ...
R/align.pseudotime.R#L35   path1_time <- cell.metadata.sub[cell.m ...
R/align.pseudotime.R#L36   names(path1_time) <- cell.metadata.sub ...
R/align.pseudotime.R#L37   path2_time <- cell.metadata.sub[cell.m ...
R/align.pseudotime.R#L38   names(path2_time) <- cell.metadata.sub ...
R/align.pseudotime.R#L40   # Get list ...
R/align.pseudotime.R#L41   pTimeVectors <- select_longer_vector( ...
R/align.pseudotime.R#L44   ) ...
R/align.pseudotime.R#L46   if (length(pTimeVectors) == 4) { ...
R/align.pseudotime.R#L48       message(paste(pTimeVectors$long_ve ...
R/align.pseudotime.R#L49       message(paste("Adjusting", pTimeVe ...
R/align.pseudotime.R#L54       # Update ...
R/align.pseudotime.R#L55       pTimeVectors$long_vec <- rescale(p ...
R/align.pseudotime.R#L57       if (verbose) { ...
R/align.pseudotime.R#L59       } ...
R/align.pseudotime.R#L61       short_tmp <- data.frame( ...
R/align.pseudotime.R#L64       ) ...
R/align.pseudotime.R#L65       colnames(short_tmp) <- c(paste(pse ...
R/align.pseudotime.R#L66       long_tmp <- data.frame( ...
R/align.pseudotime.R#L69       ) ...
R/align.pseudotime.R#L70       colnames(long_tmp) <- c(paste(pseu ...
R/align.pseudotime.R#L71       new_time <- rbind(short_tmp, long_ ...
R/align.pseudotime.R#L73       # Merge ...
R/align.pseudotime.R#L74       cell.metadata <- merge(cell.metada ...
R/align.pseudotime.R#L75       rownames(cell.metadata) <- cell.me ...
R/align.pseudotime.R#L77       # Drop cell ...
R/align.pseudotime.R#L78       cell.metadata <- cell.metadata[, c ...
R/align.pseudotime.R#L80       # Add ...
R/align.pseudotime.R#L81       scmpObj@sce@colData <- DataFrame(c ...
R/align.pseudotime.R#L83       # Update Pseudotime ...
R/align.pseudotime.R#L84       scmpObj@addParams@pseudotime_colna ...
R/align.pseudotime.R#L86       if (verbose) { ...
R/align.pseudotime.R#L88       } ...
R/align.pseudotime.R#L89       return(scmpObj) ...
R/align.pseudotime.R#L92   } else { ...
R/align.pseudotime.R#L94       message("Both paths are comparable ...
R/align.pseudotime.R#L97   } ...
R/annotate_monocle3_cds.R#L54                                   path_p ...
R/annotate_monocle3_cds.R#L55                                   root_l ...
R/annotate_monocle3_cds.R#L56                                   pseudo ...
R/annotate_monocle3_cds.R#L57                                   path_c ...
R/annotate_monocle3_cds.R#L58                                   verbos ...
R/annotate_monocle3_cds.R#L59   # Convert the reduction method to uppe ...
R/annotate_monocle3_cds.R#L60   reduction_method <- toupper(reduction_ ...
R/annotate_monocle3_cds.R#L62   # Extract principal points and convert ...
R/annotate_monocle3_cds.R#L63   y_to_cells.df <- cds@principal_graph_a ...
R/annotate_monocle3_cds.R#L66   # Add a new column 'barcode' with the  ...
R/annotate_monocle3_cds.R#L67   y_to_cells <- y_to_cells.df %>% ...
R/annotate_monocle3_cds.R#L71   # Extract the root cells ...
R/annotate_monocle3_cds.R#L72   root <- cds@principal_graph_aux[[reduc ...
R/annotate_monocle3_cds.R#L74   # Print the identified root points, if ...
R/annotate_monocle3_cds.R#L75   if (verbose) { ...
R/annotate_monocle3_cds.R#L77   } ...
R/annotate_monocle3_cds.R#L79   # Extract the minimum spanning tree ...
R/annotate_monocle3_cds.R#L80   mst <- cds@principal_graph_aux@listDat ...
R/annotate_monocle3_cds.R#L82   # Get the endpoint nodes (degree 1 nod ...
R/annotate_monocle3_cds.R#L83   endpoints <- names(which(degree(mst) = ...
R/annotate_monocle3_cds.R#L84   endpoints <- endpoints[!endpoints %in% ...
R/annotate_monocle3_cds.R#L86   # Verbose ...
R/annotate_monocle3_cds.R#L87   if (verbose) { ...
R/annotate_monocle3_cds.R#L90   } ...
R/annotate_monocle3_cds.R#L92   # Generate the network matrix ...
R/annotate_monocle3_cds.R#L93   cellWeights <- lapply(endpoints, funct ...
R/annotate_monocle3_cds.R#L96       shortest_paths(mst, root, endpoint ...
R/annotate_monocle3_cds.R#L108   }) %>% ...
R/annotate_monocle3_cds.R#L111   rownames(cellWeights) <- colnames(cds) ...
R/annotate_monocle3_cds.R#L113   # Get pseudotime for each path ...
R/annotate_monocle3_cds.R#L114   pseudotime.path.frame <- matrix(cds@pr ...
R/annotate_monocle3_cds.R#L117   ) ...
R/annotate_monocle3_cds.R#L119   # Get the number of cells for each pat ...
R/annotate_monocle3_cds.R#L120   num.cells.per.path <- apply(cellWeight ...
R/annotate_monocle3_cds.R#L122   }) %>% as.data.frame() ...
R/annotate_monocle3_cds.R#L123   colnames(num.cells.per.path) <- "nCell ...
R/annotate_monocle3_cds.R#L124   num.cells.per.path$endpoint <- rowname ...
R/annotate_monocle3_cds.R#L126   # Print longest and shortest paths, if ...
R/annotate_monocle3_cds.R#L127   if (verbose) { ...
R/annotate_monocle3_cds.R#L132   } ...
R/annotate_monocle3_cds.R#L134   # Update the cell dataset with the end ...
R/annotate_monocle3_cds.R#L135   endpoints <- colnames(cellWeights) ...
R/annotate_monocle3_cds.R#L137   # Extract cell metadata ...
R/annotate_monocle3_cds.R#L138   cell.meta <- as.data.frame(colData(cds ...
R/annotate_monocle3_cds.R#L140   # Get the lineage path names ...
R/annotate_monocle3_cds.R#L141   path_names <- colnames(cellWeights) ...
R/annotate_monocle3_cds.R#L143   # Add the lineage path to each cell me ...
R/annotate_monocle3_cds.R#L144   cell.meta$PrincipalPoints <- apply(cel ...
R/annotate_monocle3_cds.R#L147   }) ...
R/annotate_monocle3_cds.R#L149   # Mark the root cells in the cell meta ...
R/annotate_monocle3_cds.R#L150   cell.meta[rownames(cell.meta) %in% c(r ...
R/annotate_monocle3_cds.R#L152   # Add pseudotime to the cell metadata ...
R/annotate_monocle3_cds.R#L153   if (all(apply(pseudotime.path.frame, 1 ...
R/annotate_monocle3_cds.R#L156       message("Universal Pseudotime Dete ...
R/annotate_monocle3_cds.R#L158   } else { ...
R/annotate_monocle3_cds.R#L160   } ...
R/annotate_monocle3_cds.R#L162   # Add path information ...
R/annotate_monocle3_cds.R#L163   cell.meta[[path_colname]] <- convert_t ...
R/annotate_monocle3_cds.R#L166   ) ...
R/annotate_monocle3_cds.R#L168   # Update cell dataset with the updated ...
R/annotate_monocle3_cds.R#L169   cds@colData <- DataFrame(cell.meta) ...
R/annotate_monocle3_cds.R#L171   # Return a list with updated cell data ...
R/annotate_monocle3_cds.R#L172   return(cds) ...
R/annotate_sce.R#L47                          pseudotime_coln ...
R/annotate_sce.R#L48                          path_prefix = " ...
R/annotate_sce.R#L49                          root_label = "r ...
R/annotate_sce.R#L50                          path_colname =  ...
R/annotate_sce.R#L51                          existing_pseudo ...
R/annotate_sce.R#L52                          existing_path_c ...
R/annotate_sce.R#L53                          labels_exist =  ...
R/annotate_sce.R#L54                          verbose = TRUE) ...
R/annotate_sce.R#L55   # Overwite the columns ...
R/annotate_sce.R#L56   if (labels_exist) { ...
R/annotate_sce.R#L58       all(!is.null(existing_pseudotime_c ...
R/annotate_sce.R#L59       msg = paste("Requested to set 'pat ...
R/annotate_sce.R#L60                   'existing_pseudotime_c ...
R/annotate_sce.R#L64       message(paste0( ...
R/annotate_sce.R#L67       )) ...
R/annotate_sce.R#L75       all(existing_pseudotime_colname %i ...
R/annotate_sce.R#L76       msg = paste("'", existing_pseudoti ...
R/annotate_sce.R#L80       all(existing_path_colname %in% col ...
R/annotate_sce.R#L81       msg = paste("'", existing_path_col ...
R/annotate_sce.R#L95   } else { ...
R/annotate_sce.R#L97       message(paste("Skipping overwritti ...
R/annotate_sce.R#L101   } ...
R/as_scmp.R#L57                       labels_exist = FAL ...
R/as_scmp.R#L59   # Check Conversion Type ...
R/as_scmp.R#L60   assert_that(from %in% c("cds", "sce"), ...
R/as_scmp.R#L63   ) ...
R/as_scmp.R#L65   # Validate S4 ...
R/as_scmp.R#L66   assert_that( ...
R/as_scmp.R#L70   ) ...
R/as_scmp.R#L72   # Check and validate additional parame ...
R/as_scmp.R#L73   if (!is.null(additional_params)) { ...
R/as_scmp.R#L75       msg = "Please provide 'additional_ ...
R/as_scmp.R#L76       See details for more information" ...
R/as_scmp.R#L80       assert_that(names(additional_param ...
R/as_scmp.R#L83       ) ...
R/as_scmp.R#L85       assert_that(all(names(additional_p ...
R/as_scmp.R#L87                   'existing_path_colname ...
R/as_scmp.R#L88       ) ...
R/as_scmp.R#L90   } else { ...
R/as_scmp.R#L93       additional_params <- list(reductio ...
R/as_scmp.R#L95       additional_params <- list( ...
R/as_scmp.R#L99       ) ...
R/as_scmp.R#L101   } ...
R/as_scmp.R#L103   # if 'sce' is selected ...
R/as_scmp.R#L104   if (is(object)[1] == "SingleCellExperi ...
R/as_scmp.R#L106       message("Supplied object: SingleCe ...
R/as_scmp.R#L110       sce = object, ...
R/as_scmp.R#L111       pseudotime_colname = pseudotime_co ...
R/as_scmp.R#L112       path_prefix = path_prefix, ...
R/as_scmp.R#L113       root_label = root_label, ...
R/as_scmp.R#L114       path_colname = path_colname, ...
R/as_scmp.R#L115       existing_pseudotime_colname = addi ...
R/as_scmp.R#L116       existing_path_colname = additional ...
R/as_scmp.R#L117       labels_exist = additional_params[[ ...
R/as_scmp.R#L118       verbose = verbose ...
R/as_scmp.R#L123       sce = annotated_sce, ...
R/as_scmp.R#L124       compress.sce = SingleCellExperimen ...
R/as_scmp.R#L134       print(scmpObj) ...
R/as_scmp.R#L139   } else if (is(object)[1] == "cell_data ...
R/as_scmp.R#L141       message("Supplied object: cell_dat ...
R/as_scmp.R#L146       additional_params[["reduction_meth ...
R/as_scmp.R#L159       scmpObj <- selectPath.m3( ...
R/as_scmp.R#L165       ) ...
R/as_scmp.R#L167       stop("Only support for interactive ...
R/as_scmp.R#L171       scmpObj <- align.pseudotime( ...
R/as_scmp.R#L177       ) ...
R/as_scmp.R#L182       print(scmpObj) ...
R/as_scmp.R#L185   } ...
R/calc_bin_size.R#L19   # Use the 'str_split' function from th ...
R/calc_bin_size.R#L20   # of the input data frame 'x' by the ' ...
R/calc_bin_size.R#L21   # This returns a list where each eleme ...
R/calc_bin_size.R#L22   # 'c()' is used to concatenate these v ...
R/calc_bin_size.R#L23   # Finally, 'length' is used to get the ...
R/calc_bin_size.R#L24   # which is stored in the 'size' variab ...
R/calc_bin_size.R#L25   size <- length(c(str_split(x[[clus_mem ...
R/calc_bin_size.R#L27   # Convert the 'size' variable to a num ...
R/calc_bin_size.R#L28   return(as.numeric(size)) ...
R/convert_to_path.R#L17   # Exclude "root" from the transformati ...
R/convert_to_path.R#L18   unique_vals <- unique(vec[vec != root_ ...
R/convert_to_path.R#L20   # Create a named vector for the mappin ...
R/convert_to_path.R#L21   name_map <- setNames(paste0(path_prefi ...
R/convert_to_path.R#L23   # Map and replace the non-root element ...
R/convert_to_path.R#L24   vec[vec != root_label] <- name_map[vec ...
R/convert_to_path.R#L26   return(vec) ...
R/create_range.R#L30                          bin_colname = " ...
R/create_range.R#L31   # Convert the factor column "bin" to c ...
R/create_range.R#L32   y <- as.character(x[[bin_colname]]) ...
R/create_range.R#L34   # Remove square and round brackets fro ...
R/create_range.R#L35   y <- y %>% str_remove_all(pattern = "\ ...
R/create_range.R#L37   # Split the character string by comma  ...
R/create_range.R#L38   y1 <- as.numeric(sapply(strsplit(y, ", ...
R/create_range.R#L40   # Split the character string by comma  ...
R/create_range.R#L41   y2 <- as.numeric(sapply(strsplit(y, ", ...
R/create_range.R#L43   if (verbose) { ...
R/create_range.R#L45       "Lower Bound:", y1, ", Upper Bound ...
R/create_range.R#L47   } ...
R/create_range.R#L49   # Combine the lower bound, upper bound ...
R/create_range.R#L50   rangeVec <- c(y1, y2, x[[bin_size_coln ...
R/create_range.R#L52   # Return the numeric vector ...
R/create_range.R#L53   return(as.numeric(rangeVec)) ...
R/create_scmpObj.R#L32                            cell_data, ...
R/create_scmpObj.R#L33                            feature_data, ...
R/create_scmpObj.R#L34                            bin_counts =  ...
R/create_scmpObj.R#L35                            bin_cell_data ...
R/create_scmpObj.R#L36                            pseudotime_co ...
R/create_scmpObj.R#L37                            path_colname, ...
R/create_scmpObj.R#L38                            use_as_bin =  ...
R/create_scmpObj.R#L39   # Validation Checks ...
R/create_scmpObj.R#L40   assert_that(ncol(counts) == nrow(cell_ ...
R/create_scmpObj.R#L42   ) ...
R/create_scmpObj.R#L44   assert_that(all(colnames(counts) == ro ...
R/create_scmpObj.R#L46   ) ...
R/create_scmpObj.R#L48   if (!is.null(bin_counts) | !is.null(bi ...
R/create_scmpObj.R#L50       msg = paste("Number of cells in bi ...
R/create_scmpObj.R#L53       msg = paste("Rownames of bin_count ...
R/create_scmpObj.R#L55   } ...
R/create_scmpObj.R#L57   # Create Single-Cell Experiment Object ...
R/create_scmpObj.R#L58   sce_tmp <- SingleCellExperiment( ...
R/create_scmpObj.R#L61   ) ...
R/create_scmpObj.R#L63   # Initate scMaSigPro ...
R/create_scmpObj.R#L64   scmpObj <- new("scMaSigProClass", ...
R/create_scmpObj.R#L67   ) ...
R/create_scmpObj.R#L68   sce_tmp <- NULL ...
R/create_scmpObj.R#L70   # Use as bin ...
R/create_scmpObj.R#L71   if (use_as_bin) { ...
R/create_scmpObj.R#L73       list(bulk.counts = counts), ...
R/create_scmpObj.R#L74       colData = DataFrame(cell_data) ...
R/create_scmpObj.R#L83   } ...
R/create_scmpObj.R#L85   # Update the slots ...
R/create_scmpObj.R#L86   scmpObj@addParams@pseudotime_colname < ...
R/create_scmpObj.R#L87   scmpObj@addParams@path_colname <- path ...
R/create_scmpObj.R#L90   return(scmpObj) ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L35                                          ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L36                                          ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L37   type <- match.arg(type, c("ratio", "po ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L38   if (missing(geoMeans)) { ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L41       loggeomeans <- MatrixGenerics::row ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L43       lc <- log(counts) ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L44       lc[!is.finite(lc)] <- 0 ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L45       loggeomeans <- MatrixGenerics::row ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L46       allZero <- MatrixGenerics::rowSums ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L47       loggeomeans[allZero] <- -Inf ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L49   } else { ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L52       stop("geoMeans should be as long a ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L55   } ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L56   if (all(is.infinite(loggeomeans))) { ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L58   } ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L59   sf <- if (missing(controlGenes)) { ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L61       exp(locfunc((log(cnts) - loggeomea ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L63   } else { ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L65       stop("controlGenes should be eithe ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L69       exp(locfunc((log(cnts) - loggeomea ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L71   } ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L72   if (incomingGeoMeans) { ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L75   } ...
R/DESeq2_estimateSizeFactorsForMatrix.R#L76   sf ...
R/edesignClass.R#L28   "edesignClass", ...
R/edesignClass.R#L29   representation( ...
R/edesignClass.R#L34   ), ...
R/edesignClass.R#L35   prototype = list( ...
R/edesignClass.R#L40   ), ...
R/edesignClass.R#L41   validity = function(object) { ...
R/edesignClass.R#L43       stop("dis slot is not a valid data ...
R/edesignClass.R#L46       stop("groups.vector slot is not a  ...
R/edesignClass.R#L49       stop("poly_degree slot is not a va ...
R/edesignClass.R#L52       stop("edesign slot is not a valid  ...
R/edesignClass.R#L55   } ...
R/estBinSize.R#L36   estBins <- switch(bin_method, ...
R/estBinSize.R#L38       # Freedman-Diaconis rule: bin size ...
R/estBinSize.R#L39       # and inversely proportional to th ...
R/estBinSize.R#L40       2 * IQR(time_vector) / nPoints^(1  ...
R/estBinSize.R#L43       # Square root rule: bin size is pr ...
R/estBinSize.R#L44       nPoints^(1 / 2) ...
R/estBinSize.R#L47       # Sturges' rule: bin size is propo ...
R/estBinSize.R#L48       log2(nPoints) + 1 ...
R/estBinSize.R#L51       # Rice Rule: bin size is proportio ...
R/estBinSize.R#L52       2 * nPoints^(1 / 3) ...
R/estBinSize.R#L55       # Doane's formula: accounts for da ...
R/estBinSize.R#L56       sigma <- ((6 * (nPoints - 2)) / (( ...
R/estBinSize.R#L57       sk <- skewness(time_vector) ...
R/estBinSize.R#L58       1 + log2(nPoints) + log2(1 + (abs( ...
R/estBinSize.R#L61       # Scott's normal reference rule: a ...
R/estBinSize.R#L62       # Bin size is proportional to the  ...
R/estBinSize.R#L63       3.49 * abs(sd(time_vector)) / nPoi ...
R/estBinSize.R#L66   ) ...
R/estBinSize.R#L69   # Scale the estimated bin size by the  ...
R/estBinSize.R#L70   estBins <- drop_fac * estBins ...
R/estBinSize.R#L72   return(estBins) ...
R/extract_fitting.R#L2   sol <- coefficients <- group.coeffs <- ...
R/extract_fitting.R#L3   y <- reg$y ...
R/extract_fitting.R#L4   result <- summary(lmf) ...
R/extract_fitting.R#L5   novar <- vars.in[!is.element(vars.in,  ...
R/extract_fitting.R#L6   influ <- influence.measures(reg)$is.in ...
R/extract_fitting.R#L7   influ <- influ[, c(ncol(influ) - 3, nc ...
R/extract_fitting.R#L8   influ1 <- which(apply(influ, 1, all)) ...
R/extract_fitting.R#L9   if (length(influ1) != 0) { ...
R/extract_fitting.R#L11       paste(names(a)[a], collapse = "/") ...
R/extract_fitting.R#L18   } ...
R/extract_fitting.R#L19   result <- summary(reg) ...
R/extract_fitting.R#L20   if ((!(result$aic == -Inf) & !is.na(re ...
R/extract_fitting.R#L27       test <- anova(model.glm.0, reg, te ...
R/extract_fitting.R#L28       p.value <- test[6][2, 1] ...
R/extract_fitting.R#L30       test <- anova(model.glm.0, reg, te ...
R/extract_fitting.R#L31       p.value <- test[5][2, 1] ...
R/extract_fitting.R#L37       bondad <- 0 ...
R/extract_fitting.R#L43       for (m in 1:length(novar)) { ...
R/extract_fitting.R#L45       } ...
R/extract_fitting.R#L50       "(Intercept)"] < alfa) { ...
R/extract_fitting.R#L51       coeff[1] <- result$coefficients[,  ...
R/extract_fitting.R#L53       p.valor[1] <- result$coefficients[ ...
R/extract_fitting.R#L55       t[1] <- result$coefficients[, 3][r ...
R/extract_fitting.R#L59       if (is.element(vars.in[j - 1], row ...
R/extract_fitting.R#L61           vars.in[j - 1]] ...
R/extract_fitting.R#L63           vars.in[j - 1]] ...
R/extract_fitting.R#L65           vars.in[j - 1]] ...
R/extract_fitting.R#L66       } ...
R/extract_fitting.R#L69       sol <- rbind(sol, as.numeric(c( ...
R/extract_fitting.R#L72       ))) ...
R/extract_fitting.R#L73       coefficients <- rbind(coefficients ...
R/extract_fitting.R#L74       t.score <- rbind(t.score, t) ...
R/extract_fitting.R#L75       sig.profiles <- rbind(sig.profiles ...
R/extract_fitting.R#L76       h <- nrow(sol) ...
R/extract_fitting.R#L77       rownames(sol)[h] <- name ...
R/extract_fitting.R#L78       rownames(coefficients)[h] <- name ...
R/extract_fitting.R#L79       rownames(t.score)[h] <- name ...
R/extract_fitting.R#L80       rownames(sig.profiles)[h] <- name ...
R/extract_fitting.R#L82   } ...
R/extract_fitting.R#L84   # Return Calculation ...
R/extract_fitting.R#L85   return(list( ...
R/extract_fitting.R#L95   )) ...
R/extract.intervals.R#L2   # Create Dataframe ...
R/extract.intervals.R#L3   new_range_current <- as.data.frame(ent ...
R/extract.intervals.R#L6   )) ...
R/extract.intervals.R#L7   # Set columns ...
R/extract.intervals.R#L8   colnames(new_range_current) <- c(bin,  ...
R/extract.intervals.R#L10   # Current bin new table ...
R/extract.intervals.R#L11   new_bin_table_current <- as.data.frame ...
R/extract.intervals.R#L13       apply( ...
R/extract.intervals.R#L18       ) ...
R/extract.intervals.R#L20   ) ...
R/extract.intervals.R#L21   # Set column names ...
R/extract.intervals.R#L22   colnames(new_bin_table_current) <- c(l ...
R/extract.intervals.R#L24   # Return ...
R/extract.intervals.R#L25   return(new_bin_table_current) ...
R/make.pseudobulk.counts.R#L41                                    bin_m ...
R/make.pseudobulk.counts.R#L42                                    bin_c ...
R/make.pseudobulk.counts.R#L43                                    assay ...
R/make.pseudobulk.counts.R#L44                                    clust ...
R/make.pseudobulk.counts.R#L45   # Check Object Validity ...
R/make.pseudobulk.counts.R#L46   assert_that(is(scmpObject, "scMaSigPro ...
R/make.pseudobulk.counts.R#L48   ) ...
R/make.pseudobulk.counts.R#L50   # Count slot ...
R/make.pseudobulk.counts.R#L51   assert_that( ...
R/make.pseudobulk.counts.R#L53       assay_name %in% names(scmpObject@s ...
R/make.pseudobulk.counts.R#L56   ) ...
R/make.pseudobulk.counts.R#L58   # Get assay ...
R/make.pseudobulk.counts.R#L59   counts <- scmpObject@sce@assays@data@l ...
R/make.pseudobulk.counts.R#L61   # Get Pseudobulk Profile ...
R/make.pseudobulk.counts.R#L62   pseudo_bulk_profile <- as.data.frame(c ...
R/make.pseudobulk.counts.R#L64   assert_that(bin_members_colname %in% c ...
R/make.pseudobulk.counts.R#L66   ) ...
R/make.pseudobulk.counts.R#L67   assert_that(bin_colname %in% colnames( ...
R/make.pseudobulk.counts.R#L69   ) ...
R/make.pseudobulk.counts.R#L71   # Get the meta-information for pseudob ...
R/make.pseudobulk.counts.R#L72   meta.info <- pseudo_bulk_profile[, c(b ...
R/make.pseudobulk.counts.R#L74   # Run mclapply ...
R/make.pseudobulk.counts.R#L75   pb.counts <- lapply(1:nrow(meta.info), ...
R/make.pseudobulk.counts.R#L90       "mean" = as.matrix(round(rowMeans( ...
R/make.pseudobulk.counts.R#L91       "sum"  = as.matrix(rowSums(bin_mat ...
R/make.pseudobulk.counts.R#L92       stop("Invalid cluster_count_by val ...
R/make.pseudobulk.counts.R#L97   }) ...
R/make.pseudobulk.counts.R#L99   # Convert the list output of mclapply  ...
R/make.pseudobulk.counts.R#L100   pb.counts <- do.call(cbind, pb.counts) ...
R/make.pseudobulk.counts.R#L101   rownames(pb.counts) <- rownames(counts ...
R/make.pseudobulk.counts.R#L102   colnames(pb.counts) <- meta.info[[bin_ ...
R/make.pseudobulk.counts.R#L104   # Return the counts ...
R/make.pseudobulk.counts.R#L105   scmpObject@compress.sce@assays@data@li ...
R/make.pseudobulk.counts.R#L107   # return ...
R/make.pseudobulk.counts.R#L108   return(scmpObject) ...
R/optimize.bin.max.R#L25                              time_vector ...
R/optimize.bin.max.R#L26                              drop) { ...
R/optimize.bin.max.R#L27   # Initiate an empty uniform bin ...
R/optimize.bin.max.R#L28   uniform_bin_df <- data.frame(matrix(NA ...
R/optimize.bin.max.R#L29   colnames(uniform_bin_df) <- colnames(b ...
R/optimize.bin.max.R#L31   # Binning one-by one ...
R/optimize.bin.max.R#L32   for (i in c(1:nrow(bin_table))) { ...
R/optimize.bin.max.R#L41       # get pseudotime ...
R/optimize.bin.max.R#L42       pTime.for.big.interval <- time_vec ...
R/optimize.bin.max.R#L44       # Estimate how many splits are req ...
R/optimize.bin.max.R#L45       potential_splits <- ceiling(estBin ...
R/optimize.bin.max.R#L48       )) ...
R/optimize.bin.max.R#L50       # Run the extraction ...
R/optimize.bin.max.R#L51       small_splitted_bin_df <- extract.i ...
R/optimize.bin.max.R#L55       ) ...
R/optimize.bin.max.R#L56       # Validation ...
R/optimize.bin.max.R#L57       if (verbose) { ...
R/optimize.bin.max.R#L59       } ...
R/optimize.bin.max.R#L61       # Add new Row ...
R/optimize.bin.max.R#L62       uniform_bin_df <- rbind(uniform_bi ...
R/optimize.bin.max.R#L64       uniform_bin_df <- rbind(uniform_bi ...
R/optimize.bin.max.R#L65       if (verbose) { ...
R/optimize.bin.max.R#L67           message(paste("Skipping bin wi ...
R/optimize.bin.max.R#L69       } ...
R/optimize.bin.max.R#L71   } ...
R/optimize.bin.max.R#L72   uniform_bin_df <- uniform_bin_df[-1, ] ...
R/optimize.bin.max.R#L74   # Correct the rows ...
R/optimize.bin.max.R#L75   rownames(uniform_bin_df) <- NULL ...
R/optimize.bin.max.R#L77   # Return the new data ...
R/optimize.bin.max.R#L78   return(uniform_bin_df) ...
R/sc.get.siggenes.R#L56   # Check Validity of the object ...
R/sc.get.siggenes.R#L57   assert_that(is(scmpObj, "scMaSigProCla ...
R/sc.get.siggenes.R#L59   ) ...
R/sc.get.siggenes.R#L61   # Create a named tstep ...
R/sc.get.siggenes.R#L62   tstep <- list( ...
R/sc.get.siggenes.R#L70   ) ...
R/sc.get.siggenes.R#L73   sig.genes.s3 <- get.siggenes(tstep, ...
R/sc.get.siggenes.R#L79   ) ...
R/sc.get.siggenes.R#L81   # Call the maSigPro get sig ...
R/sc.get.siggenes.R#L82   # Create Object ...
R/sc.get.siggenes.R#L83   siggenes.object <- new("sigClass", ...
R/sc.get.siggenes.R#L86   ) ...
R/sc.get.siggenes.R#L88   # Update the slot ...
R/sc.get.siggenes.R#L89   scmpObj@sig.genes <- siggenes.object ...
R/sc.get.siggenes.R#L91   # Return ...
R/sc.get.siggenes.R#L92   return(scmpObj) ...
R/sc.make.design.matrix.R#L20                                   poly_d ...
R/sc.make.design.matrix.R#L21                                   bin_ps ...
R/sc.make.design.matrix.R#L22                                   path_c ...
R/sc.make.design.matrix.R#L23   # Check Object Validity ...
R/sc.make.design.matrix.R#L24   assert_that(is(scmpObject, "scMaSigPro ...
R/sc.make.design.matrix.R#L26   ) ...
R/sc.make.design.matrix.R#L28   # Extract cell metadata ...
R/sc.make.design.matrix.R#L29   comp.cell.metadata <- as.data.frame(sc ...
R/sc.make.design.matrix.R#L31   # pseudotime_colname ...
R/sc.make.design.matrix.R#L32   assert_that((bin_pseudotime_colname %i ...
R/sc.make.design.matrix.R#L34   ) ...
R/sc.make.design.matrix.R#L35   # path_colname ...
R/sc.make.design.matrix.R#L36   assert_that((path_colname %in% colname ...
R/sc.make.design.matrix.R#L38   ) ...
R/sc.make.design.matrix.R#L40   # Subset cell metadata ...
R/sc.make.design.matrix.R#L41   com.cell.meta <- comp.cell.metadata[,  ...
R/sc.make.design.matrix.R#L43   # Get available paths ...
R/sc.make.design.matrix.R#L44   avail.paths <- as.vector(unique(com.ce ...
R/sc.make.design.matrix.R#L46   # Add Dummy Variables ...
R/sc.make.design.matrix.R#L47   for (i in avail.paths) { ...
R/sc.make.design.matrix.R#L49   } ...
R/sc.make.design.matrix.R#L51   # Drop path columns ...
R/sc.make.design.matrix.R#L52   com.cell.meta <- com.cell.meta[, colna ...
R/sc.make.design.matrix.R#L54   # Get colvec ...
R/sc.make.design.matrix.R#L55   col.vec <- colnames(com.cell.meta)[col ...
R/sc.make.design.matrix.R#L57   # Add Replicate Column ...
R/sc.make.design.matrix.R#L58   com.cell.meta <- com.cell.meta %>% ...
R/sc.make.design.matrix.R#L62   # Order ...
R/sc.make.design.matrix.R#L63   ord <- c(c(1, ncol(com.cell.meta)), c( ...
R/sc.make.design.matrix.R#L65   # Reorder columns ...
R/sc.make.design.matrix.R#L66   com.cell.meta <- as.matrix(com.cell.me ...
R/sc.make.design.matrix.R#L68   # Run Original MaSigPro make.matrix.de ...
R/sc.make.design.matrix.R#L69   edesignList <- make.design.matrix(com. ...
R/sc.make.design.matrix.R#L74   ) ...
R/sc.make.design.matrix.R#L76   # Create Object ...
R/sc.make.design.matrix.R#L77   edesignObj <- new("edesignClass", ...
R/sc.make.design.matrix.R#L82   ) ...
R/sc.make.design.matrix.R#L84   # Update Slot ...
R/sc.make.design.matrix.R#L85   scmpObject@edesign <- edesignObj ...
R/sc.make.design.matrix.R#L87   return(scmpObject) ...
R/sc.p.vector.class.R#L39   slots = c( ...
R/sc.p.vector.class.R#L47   ), ...
R/sc.p.vector.class.R#L48   validity = function(object) { ...
R/sc.p.vector.class.R#L51       stop("Slot 'SELEC' must be a dgCMa ...
R/sc.p.vector.class.R#L56       stop("Slot 'sc.p.vector' must be a ...
R/sc.p.vector.class.R#L61       stop("Slot 'p.adjusted' must be nu ...
R/sc.p.vector.class.R#L66       stop("Slot 'FDR' must be numeric." ...
R/sc.p.vector.class.R#L71       stop("Slot 'dis' must be a data fr ...
R/sc.p.vector.class.R#L76       stop("Slot 'groups.vector' must be ...
R/sc.p.vector.class.R#L85   }, ...
R/sc.p.vector.class.R#L86   prototype = list( ...
R/sc.p.vector.class.R#L93   ) ...
R/sc.p.vector.R#L69   # Check the type of the 'design' param ...
R/sc.p.vector.R#L70   assert_that(is(scmpObj, "scMaSigProCla ...
R/sc.p.vector.R#L72   ) ...
R/sc.p.vector.R#L74   # Extract from s4 ...
R/sc.p.vector.R#L75   dis <- as.data.frame(scmpObj@edesign@d ...
R/sc.p.vector.R#L76   groups.vector <- scmpObj@edesign@group ...
R/sc.p.vector.R#L77   edesign <- scmpObj@edesign@edesign ...
R/sc.p.vector.R#L79   # Convert 'scmpObj' to matrix and sele ...
R/sc.p.vector.R#L80   dat <- as.matrix(scmpObj@compress.sce@ ...
R/sc.p.vector.R#L81   dat <- dat[, as.character(rownames(dis ...
R/sc.p.vector.R#L82   G <- nrow(dat) ...
R/sc.p.vector.R#L84   # Removing rows with many missings: ...
R/sc.p.vector.R#L85   count.na <- function(x) (length(x) - l ...
R/sc.p.vector.R#L86   dat <- dat[apply(dat, 1, count.na) >=  ...
R/sc.p.vector.R#L88   # Add check ...
R/sc.p.vector.R#L89   # assert_that((dat@Dim[1] > 1), msg =  ...
R/sc.p.vector.R#L90   assert_that((nrow(dat) > 1), msg = pas ...
R/sc.p.vector.R#L92   # if(verbose){ ...
R/sc.p.vector.R#L93   #     message(paste("'min.obs' is set  ...
R/sc.p.vector.R#L94   #     message(paste("After filtering w ...
R/sc.p.vector.R#L95   # } ...
R/sc.p.vector.R#L97   # Removing rows with all zeros: ...
R/sc.p.vector.R#L98   sumatot <- apply(dat, 1, sum) ...
R/sc.p.vector.R#L99   counts0 <- which(sumatot == 0) ...
R/sc.p.vector.R#L100   if (length(counts0) > 0) { ...
R/sc.p.vector.R#L102   } ...
R/sc.p.vector.R#L104   # Get dimensions for the input ...
R/sc.p.vector.R#L105   g <- dim(dat)[1] ...
R/sc.p.vector.R#L106   n <- dim(dat)[2] ...
R/sc.p.vector.R#L107   p <- dim(dis)[2] ...
R/sc.p.vector.R#L108   sc.p.vector <- vector(mode = "numeric" ...
R/sc.p.vector.R#L110   if (parallel == F) { ...
R/sc.p.vector.R#L112       pb <- txtProgressBar(min = 0, max  ...
R/sc.p.vector.R#L114   } ...
R/sc.p.vector.R#L116   # Calculate  offset ...
R/sc.p.vector.R#L117   if (offset) { ...
R/sc.p.vector.R#L118       dat <- dat + 1 ...
R/sc.p.vector.R#L119       offsetData <- scmp_estimateSizeFac ...
R/sc.p.vector.R#L120       if (logOffset) { ...
R/sc.p.vector.R#L121           offsetData <- log(offsetData) ...
R/sc.p.vector.R#L122       } ...
R/sc.p.vector.R#L123   } else { ...
R/sc.p.vector.R#L124       offsetData <- NULL ...
R/sc.p.vector.R#L125   } ...
R/sc.p.vector.R#L127   if (parallel) { ...
R/sc.p.vector.R#L130       message(paste("Running with", numC ...
R/sc.p.vector.R#L132   } else { ...
R/sc.p.vector.R#L134   } ...
R/sc.p.vector.R#L136   # Check for weight usage ...
R/sc.p.vector.R#L137   if (useWeights) { ...
R/sc.p.vector.R#L138       # Get the pathframe ...
R/sc.p.vector.R#L139       compressed.data <- as.data.frame(s ...
R/sc.p.vector.R#L140        ...
R/sc.p.vector.R#L141       # Get bin_name and bin size ...
R/sc.p.vector.R#L142       weight_df <- log(compressed.data[, ...
R/sc.p.vector.R#L143        ...
R/sc.p.vector.R#L144       # Set names ...
R/sc.p.vector.R#L145       names(weight_df) <- rownames(compr ...
R/sc.p.vector.R#L146        ...
R/sc.p.vector.R#L147       # Log of weights ...
R/sc.p.vector.R#L148       if(logWeights){ ...
R/sc.p.vector.R#L149           weight_df <- log(weight_df) ...
R/sc.p.vector.R#L150       } ...
R/sc.p.vector.R#L151        ...
R/sc.p.vector.R#L152       # Take inverse weights ...
R/sc.p.vector.R#L153       if (useInverseWeights) { ...
R/sc.p.vector.R#L154           weight_df <- 1 / weight_df ...
R/sc.p.vector.R#L155       } ...
R/sc.p.vector.R#L156        ...
R/sc.p.vector.R#L157   } else { ...
R/sc.p.vector.R#L158       weight_df <- NULL ...
R/sc.p.vector.R#L159   } ...
R/sc.p.vector.R#L161   p.vector.list <- mclapply(1:g, functio ...
R/sc.p.vector.R#L168       if (is.element(i, div) && verbose_ ...
R/sc.p.vector.R#L170           setTxtProgressBar(pb_lapply, i ...
R/sc.p.vector.R#L172       } ...
R/sc.p.vector.R#L190       data = dis_lapply, family = family ...
R/sc.p.vector.R#L191       offset = offsetdata_lapply, weight ...
R/sc.p.vector.R#L192       maxit = max_it_lapply ...
R/sc.p.vector.R#L196       sc_p_val <- 1 ...
R/sc.p.vector.R#L198       model.glm.0 <- glm(y ~ 1, ...
R/sc.p.vector.R#L202       ) ...
R/sc.p.vector.R#L204       # Perform ANOVA or Chi-square test ...
R/sc.p.vector.R#L205       if (family_lapply$family == "gauss ...
R/sc.p.vector.R#L208       } else { ...
R/sc.p.vector.R#L211       } ...
R/sc.p.vector.R#L215   }, mc.cores = numCores) ...
R/sc.p.vector.R#L217   names(p.vector.list) <- rownames(dat) ...
R/sc.p.vector.R#L218   sc.p.vector <- unlist(p.vector.list, r ...
R/sc.p.vector.R#L219   #------------------------------------- ...
R/sc.p.vector.R#L220   # Correct p-values using FDR correctio ...
R/sc.p.vector.R#L221   p.adjusted <- unlist(p.adjust(sc.p.vec ...
R/sc.p.vector.R#L223   ) ...
R/sc.p.vector.R#L224   names(p.adjusted) <- names(sc.p.vector ...
R/sc.p.vector.R#L225   genes.selected <- rownames(dat)[which( ...
R/sc.p.vector.R#L226   FDR <- sort(sc.p.vector)[length(genes. ...
R/sc.p.vector.R#L228   # Subset the expression values of sign ...
R/sc.p.vector.R#L229   SELEC <- dat[rownames(dat) %in% genes. ...
R/sc.p.vector.R#L231   if (nrow(SELEC) == 0) { ...
R/sc.p.vector.R#L234   } else { ...
R/sc.p.vector.R#L240       SELEC = as(SELEC, "dgCMatrix"), ...
R/sc.p.vector.R#L241       p.vector = sc.p.vector, ...
R/sc.p.vector.R#L242       p.adjusted = p.adjusted, ...
R/sc.p.vector.R#L243       FDR = FDR, ...
R/sc.p.vector.R#L244       dis = dis, ...
R/sc.p.vector.R#L245       groups.vector = groups.vector, ...
R/sc.p.vector.R#L246       family = family ...
R/sc.p.vector.R#L267   } ...
R/sc.path.intersection.R#L19   # Extract the list of significant gene ...
R/sc.path.intersection.R#L20   gene.list <- lapply(colnames(scmpObj@s ...
R/sc.path.intersection.R#L22   }) ...
R/sc.path.intersection.R#L23   names(gene.list) <- colnames(scmpObj@s ...
R/sc.path.intersection.R#L25   # Perform UpSet plot ...
R/sc.path.intersection.R#L26   upset( ...
R/sc.path.intersection.R#L36   ) ...
R/sc.plot.bins.bar.R#L18                              path_colnam ...
R/sc.plot.bins.bar.R#L19                              bin_size_co ...
R/sc.plot.bins.bar.R#L20                              bin_pseudot ...
R/sc.plot.bins.bar.R#L21   # Check Object Validity ...
R/sc.plot.bins.bar.R#L22   assert_that(is(scmpObj, "scMaSigProCla ...
R/sc.plot.bins.bar.R#L24   ) ...
R/sc.plot.bins.bar.R#L26   # Check whether the compression data e ...
R/sc.plot.bins.bar.R#L27   compression.info <- as.data.frame(colD ...
R/sc.plot.bins.bar.R#L29   # Check for extended data ...
R/sc.plot.bins.bar.R#L30   if (nrow(compression.info) < 1) { ...
R/sc.plot.bins.bar.R#L32   } ...
R/sc.plot.bins.bar.R#L34   # Check if values are binned ...
R/sc.plot.bins.bar.R#L35   assert_that(nrow(compression.info) >=  ...
R/sc.plot.bins.bar.R#L37   ) ...
R/sc.plot.bins.bar.R#L39   # get conesa colors ...
R/sc.plot.bins.bar.R#L40   conesa_colors <- getConesaColors()[c(T ...
R/sc.plot.bins.bar.R#L41   names(conesa_colors) <- unique(unique( ...
R/sc.plot.bins.bar.R#L43   # Create plot data ...
R/sc.plot.bins.bar.R#L44   plt.data <- data.frame( ...
R/sc.plot.bins.bar.R#L49   ) ...
R/sc.plot.bins.bar.R#L51   # Create plot ...
R/sc.plot.bins.bar.R#L52   bar <- ggplot(plt.data, aes(x = .data$ ...
R/sc.plot.bins.bar.R#L62   print(bar) ...
R/sc.plot.bins.tile.R#L18                               path_colna ...
R/sc.plot.bins.tile.R#L19                               bin_size_c ...
R/sc.plot.bins.tile.R#L20                               bin_pseudo ...
R/sc.plot.bins.tile.R#L21   # Check Object Validity ...
R/sc.plot.bins.tile.R#L22   assert_that(is(scmpObj, "scMaSigProCla ...
R/sc.plot.bins.tile.R#L24   ) ...
R/sc.plot.bins.tile.R#L26   # Check whether the compression data e ...
R/sc.plot.bins.tile.R#L27   compression.info <- as.data.frame(colD ...
R/sc.plot.bins.tile.R#L29   # Check for extended data ...
R/sc.plot.bins.tile.R#L30   if (nrow(compression.info) < 1) { ...
R/sc.plot.bins.tile.R#L32   } ...
R/sc.plot.bins.tile.R#L34   # Check if values are binned ...
R/sc.plot.bins.tile.R#L35   assert_that(nrow(compression.info) >=  ...
R/sc.plot.bins.tile.R#L37   ) ...
R/sc.plot.bins.tile.R#L39   # get conesa colors ...
R/sc.plot.bins.tile.R#L40   conesa_colors <- getConesaColors()[c(T ...
R/sc.plot.bins.tile.R#L41   names(conesa_colors) <- unique(unique( ...
R/sc.plot.bins.tile.R#L43   # Create plot data ...
R/sc.plot.bins.tile.R#L44   plt.data <- data.frame( ...
R/sc.plot.bins.tile.R#L49   ) ...
R/sc.plot.bins.tile.R#L51   # Create plot ...
R/sc.plot.bins.tile.R#L52   tile <- ggplot(plt.data, aes(x = .data ...
R/sc.plot.bins.tile.R#L61   print(tile) ...
R/sc.PlotGroups.R#L19   function(scmpObj, ...
R/sc.PlotGroups.R#L20            feature_id, ...
R/sc.PlotGroups.R#L21            xlab = "Pooled Pseudotime", ...
R/sc.PlotGroups.R#L22            ylab = "Pseudobulk Expression ...
R/sc.PlotGroups.R#L23            smoothness = 0.01, ...
R/sc.PlotGroups.R#L24            logs = TRUE, ...
R/sc.PlotGroups.R#L25            logType = "log10") { ...
R/sc.PlotGroups.R#L39       msg = "Feature Id doesn't exist pl ...
R/sc.PlotGroups.R#L72       pooled.time = edesign.frame[, scmp ...
R/sc.PlotGroups.R#L73       pb.counts = as.vector(yy), ...
R/sc.PlotGroups.R#L74       path = scmpObj@compress.sce@colDat ...
R/sc.PlotGroups.R#L78       # Extract Coeff ...
R/sc.PlotGroups.R#L79       a <- reg.coeffs( ...
R/sc.PlotGroups.R#L83       ) ...
R/sc.PlotGroups.R#L84       a <- c(a, rep(0, (7 - length(a)))) ...
R/sc.PlotGroups.R#L86       # Extract the time ...
R/sc.PlotGroups.R#L87       time <- edesign.frame[edesign.fram ...
R/sc.PlotGroups.R#L89       # Create a data frame with time va ...
R/sc.PlotGroups.R#L90       x <- seq(from = min(time), to = ma ...
R/sc.PlotGroups.R#L92       # Compute the curve values ...
R/sc.PlotGroups.R#L93       y <- a[1] + a[2] * x + a[3] * (x^2 ...
R/sc.PlotGroups.R#L96       # Create tmpvector ...
R/sc.PlotGroups.R#L97       curve_df_tmp <- data.frame( ...
R/sc.PlotGroups.R#L100       ) ...
R/sc.PlotGroups.R#L101       curve.df <- rbind(curve.df, curve_ ...
R/sc.PlotGroups.R#L121       if (logType == "log2") { ...
R/sc.PlotGroups.R#L124       } else if (logType == "log") { ...
R/sc.PlotGroups.R#L127       } else if (logType == "log10") { ...
R/sc.PlotGroups.R#L130       } else { ...
R/sc.PlotGroups.R#L132       } ...
R/sc.PlotGroups.R#L136       geom_point(data = points.df, aes(x ...
R/sc.PlotGroups.R#L137       geom_line(data = points.df, aes(x  ...
R/sc.PlotGroups.R#L138       geom_line(data = curve.df, aes(x = ...
R/sc.PlotGroups.R#L139       ggtitle( ...
R/sc.PlotGroups.R#L142       ) + ...
R/sc.PlotGroups.R#L143       xlab(xlab) + ...
R/sc.PlotGroups.R#L144       ylab(ylab) + ...
R/sc.PlotGroups.R#L145       theme_classic(base_size = 12) + ...
R/sc.PlotGroups.R#L146       theme( ...
R/sc.PlotGroups.R#L150       ) + ...
R/sc.PlotGroups.R#L151       scale_x_continuous(breaks = seq(mi ...
R/sc.PlotGroups.R#L152       labs(color = "Paths") + ...
R/sc.PlotGroups.R#L153       # coord_cartesian(xlim = xlim, yli ...
R/sc.PlotGroups.R#L154       scale_color_manual(values = conesa ...
R/sc.PlotGroups.R#L157   } ...
R/sc.stepback.R#L2   lm1 <- glm(y ~ ., data = d, family = f ...
R/sc.stepback.R#L3   result <- summary(lm1) ...
R/sc.stepback.R#L4   max <- max(result$coefficients[, 4][-1 ...
R/sc.stepback.R#L5   if (length(result$coefficients[, 4][-1 ...
R/sc.stepback.R#L7       max <- 0 ...
R/sc.stepback.R#L8       lm1 <- glm(y ~ 1, family = family, ...
R/sc.stepback.R#L10   } ...
R/sc.stepback.R#L11   while (max > alfa) { ...
R/sc.stepback.R#L13       , ...
R/sc.stepback.R#L14       4 ...
R/sc.stepback.R#L19       min <- min(result$coefficients[, 4 ...
R/sc.stepback.R#L20       lastname <- names(result$coefficie ...
R/sc.stepback.R#L23       d <- as.data.frame(d) ...
R/sc.stepback.R#L24       colnames(d) <- lastname ...
R/sc.stepback.R#L30       max <- result$coefficients[, 4][-1 ...
R/sc.stepback.R#L31       if (max > alfa) { ...
R/sc.stepback.R#L34       } ...
R/sc.stepback.R#L36   } ...
R/sc.stepback.R#L37   return(lm1) ...
R/sc.stepfor.R#L2   pval <- NULL ...
R/sc.stepfor.R#L3   design <- NULL ...
R/sc.stepfor.R#L4   j <- 1 ...
R/sc.stepfor.R#L5   resul0 <- summary(glm(y ~ ., data = d, ...
R/sc.stepfor.R#L6   d <- as.data.frame(d[, names(resul0)[- ...
R/sc.stepfor.R#L7   for (i in 1:ncol(d)) { ...
R/sc.stepfor.R#L13   } ...
R/sc.stepfor.R#L14   min <- min(pval) ...
R/sc.stepfor.R#L15   while (min < alfa) { ...
R/sc.stepfor.R#L26       lastname <- colnames(d)[!b] ...
R/sc.stepfor.R#L30       colnames(d) <- lastname ...
R/sc.stepfor.R#L35       for (i in 1:ncol(d)) { ...
R/sc.stepfor.R#L41       } ...
R/sc.stepfor.R#L42       min <- min(pval, na.rm = TRUE) ...
R/sc.stepfor.R#L44       min <- 1 ...
R/sc.stepfor.R#L46   } ...
R/sc.stepfor.R#L47   if (is.null(design)) { ...
R/sc.stepfor.R#L49   } else { ...
R/sc.stepfor.R#L51   } ...
R/sc.stepfor.R#L52   return(lm1) ...
R/sc.T.fit.R#L63                      step.method = "back ...
R/sc.T.fit.R#L64                      Q = scmpObj@addPara ...
R/sc.T.fit.R#L65                      nvar.correction = F ...
R/sc.T.fit.R#L66                      family = scmpObj@di ...
R/sc.T.fit.R#L67                      epsilon = scmpObj@a ...
R/sc.T.fit.R#L68                      offset = scmpObj@ad ...
R/sc.T.fit.R#L69                      verbose = TRUE, ...
R/sc.T.fit.R#L70                      parallel = TRUE, ...
R/sc.T.fit.R#L71                      useWeights = scmpOb ...
R/sc.T.fit.R#L72                      useInverseWeights = ...
R/sc.T.fit.R#L73                      logWeights = scmpOb ...
R/sc.T.fit.R#L74                      logOffset = scmpObj ...
R/sc.T.fit.R#L75                      max_it = scmpObj@ad ...
R/sc.T.fit.R#L76   assert_that(is(scmpObj, "scMaSigProCla ...
R/sc.T.fit.R#L78   ) ...
R/sc.T.fit.R#L80   # Transfer Data ...
R/sc.T.fit.R#L81   dis <- scmpObj@edesign@dis ...
R/sc.T.fit.R#L82   Q <- scmpObj@addParams@Q ...
R/sc.T.fit.R#L83   groups.vector <- scmpObj@edesign@group ...
R/sc.T.fit.R#L84   groups.vector <- c(groups.vector[nchar ...
R/sc.T.fit.R#L85   edesign <- scmpObj@edesign@edesign ...
R/sc.T.fit.R#L86   G <- scmpObj@addParams@g ...
R/sc.T.fit.R#L88   dat <- scmpObj@scPVector@SELEC ...
R/sc.T.fit.R#L89   dat <- rbind(c(rep(1, ncol(dat))), dat ...
R/sc.T.fit.R#L90   dat <- dat[, as.character(rownames(dis ...
R/sc.T.fit.R#L92   g <- (dim(dat)[1] - 1) ...
R/sc.T.fit.R#L93   n <- dim(dat)[2] ...
R/sc.T.fit.R#L94   p <- dim(dis)[2] ...
R/sc.T.fit.R#L95   vars.in <- colnames(dis) ...
R/sc.T.fit.R#L96   sol <- coefficients <- group.coeffs <- ...
R/sc.T.fit.R#L97   influ.info <- matrix(NA, nrow = nrow(d ...
R/sc.T.fit.R#L98   rownames(influ.info) <- rownames(dis) ...
R/sc.T.fit.R#L100   if (nvar.correction) { ...
R/sc.T.fit.R#L102   } ...
R/sc.T.fit.R#L104   # Check for weight usage ...
R/sc.T.fit.R#L105   if (useWeights) { ...
R/sc.T.fit.R#L122       weight_df <- 1 / weight_df ...
R/sc.T.fit.R#L125   } else { ...
R/sc.T.fit.R#L127   } ...
R/sc.T.fit.R#L129   # Calculate  offset ...
R/sc.T.fit.R#L130   if (offset) { ...
R/sc.T.fit.R#L134       offsetData <- log(offsetData) ...
R/sc.T.fit.R#L136   } else { ...
R/sc.T.fit.R#L138   } ...
R/sc.T.fit.R#L140   # If parallel is requested ...
R/sc.T.fit.R#L141   if (parallel) { ...
R/sc.T.fit.R#L144       message(paste("Running with", numC ...
R/sc.T.fit.R#L146   } else { ...
R/sc.T.fit.R#L149       i <- 1 ...
R/sc.T.fit.R#L150       div <- c(1:round(g / 100)) * 100 ...
R/sc.T.fit.R#L151       pb <- txtProgressBar(min = 0, max  ...
R/sc.T.fit.R#L153   } ...
R/sc.T.fit.R#L155   # Collect all the y ...
R/sc.T.fit.R#L156   y_input <- parallel::mclapply(2:(g + 1 ...
R/sc.T.fit.R#L158   }, mc.cores = numCores) ...
R/sc.T.fit.R#L159   names(y_input) <- rownames(dat)[-1] ...
R/sc.T.fit.R#L161   # Select the covariates ...
R/sc.T.fit.R#L162   if (step.method == "backward") { ...
R/sc.T.fit.R#L164       # result_list <- lapply(names(y_in ...
R/sc.T.fit.R#L165       y <- y_input[[gene_name]] ...
R/sc.T.fit.R#L166       reg_scmpObj <- sc.stepback(y = y,  ...
R/sc.T.fit.R#L167       lmf_scmpObj <- glm(y ~ ., data = a ...
R/sc.T.fit.R#L168       model.glm.0_scmpObj <- glm(y ~ 1,  ...
R/sc.T.fit.R#L169       if (parallel == FALSE) { ...
R/sc.T.fit.R#L171           if (verbose_lapply) { ...
R/sc.T.fit.R#L174           } ...
R/sc.T.fit.R#L176       } ...
R/sc.T.fit.R#L177       return(extract_fitting(reg = reg_s ...
R/sc.T.fit.R#L178       # return(list( ...
R/sc.T.fit.R#L179       #     reg = reg, ...
R/sc.T.fit.R#L180       #     lmf = lmf, ...
R/sc.T.fit.R#L181       #     model.glm.0 = model.glm.0 ...
R/sc.T.fit.R#L182       # )) ...
R/sc.T.fit.R#L185   } else if (step.method == "forward") { ...
R/sc.T.fit.R#L187       y <- y_input[[gene_name]] ...
R/sc.T.fit.R#L188       reg_scmpObj <- sc.stepfor(y = y, d ...
R/sc.T.fit.R#L189       lmf_scmpObj <- glm(y ~ ., data = a ...
R/sc.T.fit.R#L190       model.glm.0_scmpObj <- glm(y ~ 1,  ...
R/sc.T.fit.R#L191       div <- c(1:round(g / 100)) * 100 ...
R/sc.T.fit.R#L192       if (parallel == FALSE) { ...
R/sc.T.fit.R#L194           if (verbose) { ...
R/sc.T.fit.R#L196           } ...
R/sc.T.fit.R#L198       } ...
R/sc.T.fit.R#L199       return(extract_fitting(reg = reg_s ...
R/sc.T.fit.R#L201   } else if (step.method == "two.ways.ba ...
R/sc.T.fit.R#L203       y <- y_input[[gene_name]] ...
R/sc.T.fit.R#L204       reg_scmpObj <- sc.two.ways.stepbac ...
R/sc.T.fit.R#L205       lmf_scmpObj <- glm(y ~ ., data = a ...
R/sc.T.fit.R#L206       model.glm.0_scmpObj <- glm(y ~ 1,  ...
R/sc.T.fit.R#L207       div <- c(1:round(g / 100)) * 100 ...
R/sc.T.fit.R#L208       if (parallel == FALSE) { ...
R/sc.T.fit.R#L210           if (verbose) { ...
R/sc.T.fit.R#L212           } ...
R/sc.T.fit.R#L214       } ...
R/sc.T.fit.R#L215       return(extract_fitting(reg = reg_s ...
R/sc.T.fit.R#L218   } else if (step.method == "two.ways.fo ...
R/sc.T.fit.R#L220       y <- y_input[[gene_name]] ...
R/sc.T.fit.R#L221       reg_scmpObj <- sc.two.ways.stepfor ...
R/sc.T.fit.R#L222       lmf_scmpObj <- glm(y ~ ., data = a ...
R/sc.T.fit.R#L223       model.glm.0_scmpObj <- glm(y ~ 1,  ...
R/sc.T.fit.R#L224       div <- c(1:round(g / 100)) * 100 ...
R/sc.T.fit.R#L225       if (parallel == FALSE) { ...
R/sc.T.fit.R#L227           if (verbose) { ...
R/sc.T.fit.R#L229           } ...
R/sc.T.fit.R#L231       } ...
R/sc.T.fit.R#L232       return(extract_fitting(reg = reg_s ...
R/sc.T.fit.R#L234   } else { ...
R/sc.T.fit.R#L236   } ...
R/sc.T.fit.R#L238   #------------------------------------- ...
R/sc.T.fit.R#L239   feature_names <- unlist(lapply(result_ ...
R/sc.T.fit.R#L241   })) ...
R/sc.T.fit.R#L242   # Get the soluction frame ...
R/sc.T.fit.R#L243   sol.list <- lapply(result_list, functi ...
R/sc.T.fit.R#L245   }) ...
R/sc.T.fit.R#L246   # Get Coeffcient ...
R/sc.T.fit.R#L247   coeff.list <- lapply(result_list, func ...
R/sc.T.fit.R#L249   }) ...
R/sc.T.fit.R#L250   # Get t scores ...
R/sc.T.fit.R#L251   t.list <- lapply(result_list, function ...
R/sc.T.fit.R#L253   }) ...
R/sc.T.fit.R#L254   # Get influ.info ...
R/sc.T.fit.R#L255   influ.info.list <- lapply(result_list, ...
R/sc.T.fit.R#L257   }) ...
R/sc.T.fit.R#L258   # Assuming 'parallel' is your list ...
R/sc.T.fit.R#L259   influ.info.list <- influ.info.list[!sa ...
R/sc.T.fit.R#L260   # Lapply to remove column 1 ...
R/sc.T.fit.R#L261   influ.info.list <- lapply(influ.info.l ...
R/sc.T.fit.R#L263   }) ...
R/sc.T.fit.R#L264   # Create scmpObjframe ...
R/sc.T.fit.R#L265   sol <- do.call("rbind", sol.list) ...
R/sc.T.fit.R#L266   coefficients <- do.call("rbind", coeff ...
R/sc.T.fit.R#L267   t.score <- do.call("rbind", t.list) ...
R/sc.T.fit.R#L268   influ.info <- do.call("cbind", influ.i ...
R/sc.T.fit.R#L270   # Add rownames ...
R/sc.T.fit.R#L271   rownames(coefficients) <- feature_name ...
R/sc.T.fit.R#L272   rownames(t.score) <- feature_names ...
R/sc.T.fit.R#L274   #------------------------- ...
R/sc.T.fit.R#L275   # Ends here ...
R/sc.T.fit.R#L277   if (!is.null(sol)) { ...
R/sc.T.fit.R#L283       "p-value", "R-squared", "p.valor_b ...
R/sc.T.fit.R#L284       paste("p.valor_", vars.in, sep = " ...
R/sc.T.fit.R#L287       sep = "" ...
R/sc.T.fit.R#L290       vars.in, ...
R/sc.T.fit.R#L291       sep = "" ...
R/sc.T.fit.R#L294       groups <- colnames(edesign)[3:ncol ...
R/sc.T.fit.R#L295       degree <- (length(groups.vector) / ...
R/sc.T.fit.R#L297       for (w in 1:nrow(coefficients)) { ...
R/sc.T.fit.R#L301           B <- reg.coeffs(coefficients = ...
R/sc.T.fit.R#L302           cols <- paste(rep(groups[l], e ...
R/sc.T.fit.R#L305           ) ...
R/sc.T.fit.R#L306           A <- c(A, B) ...
R/sc.T.fit.R#L307           col.names <- c(col.names, cols ...
R/sc.T.fit.R#L310       } ...
R/sc.T.fit.R#L311       colnames(group.coeffs) <- col.name ...
R/sc.T.fit.R#L312       rownames(group.coeffs) <- rownames ...
R/sc.T.fit.R#L314   } ...
R/sc.T.fit.R#L315   if (ncol(influ.info) > 2) { ...
R/sc.T.fit.R#L317       message(paste("\nInfluence:", ncol ...
R/sc.T.fit.R#L319   } ...
R/sc.T.fit.R#L320   # influ.info <- influ.info[, -1] ...
R/sc.T.fit.R#L322   # Create a constructor for the class ...
R/sc.T.fit.R#L323   t.fit.object <- new("scTFitClass", ...
R/sc.T.fit.R#L331   ) ...
R/sc.T.fit.R#L333   # Added Tfit ...
R/sc.T.fit.R#L334   scmpObj@scTFit <- t.fit.object ...
R/sc.T.fit.R#L336   # Update Parameter Slot ...
R/sc.T.fit.R#L337   scmpObj@addParams@Q <- Q ...
R/sc.T.fit.R#L338   scmpObj@addParams@useWeights <- useWei ...
R/sc.T.fit.R#L339   scmpObj@addParams@logOffset <- logOffs ...
R/sc.T.fit.R#L340   scmpObj@addParams@logWeights <- logWei ...
R/sc.T.fit.R#L341   scmpObj@addParams@max_it <- as.integer ...
R/sc.T.fit.R#L342   scmpObj@addParams@useInverseWeights <- ...
R/sc.T.fit.R#L343   scmpObj@addParams@offset <- offset ...
R/sc.T.fit.R#L344   scmpObj@addParams@epsilon <- epsilon ...
R/sc.T.fit.R#L345   scmpObj@addParams@step.method <- step. ...
R/sc.T.fit.R#L346   scmpObj@distribution <- family ...
R/sc.T.fit.R#L348   return(scmpObj) ...
R/sc.two.ways.stepback.R#L2   function(y = y, d = d, alfa = 0.05, fa ...
R/sc.two.ways.stepback.R#L9       varout <- names(result)[result ==  ...
R/sc.two.ways.stepback.R#L10       pos <- position(matrix = d, vari = ...
R/sc.two.ways.stepback.R#L11       OUT <- as.data.frame(cbind(OUT, d[ ...
R/sc.two.ways.stepback.R#L12       x <- ncol(OUT) ...
R/sc.two.ways.stepback.R#L13       colnames(OUT)[x] <- colnames(d)[po ...
R/sc.two.ways.stepback.R#L14       if (ncol(d) == 2) { ...
R/sc.two.ways.stepback.R#L17       } ...
R/sc.two.ways.stepback.R#L18       d <- d[, -pos] ...
R/sc.two.ways.stepback.R#L19       if (is.null(dim(d))) { ...
R/sc.two.ways.stepback.R#L22       } ...
R/sc.two.ways.stepback.R#L23       j <- ncol(d) + 1 ...
R/sc.two.ways.stepback.R#L24       pval <- NULL ...
R/sc.two.ways.stepback.R#L25       for (i in 1:ncol(OUT)) { ...
R/sc.two.ways.stepback.R#L31       } ...
R/sc.two.ways.stepback.R#L32       min <- min(pval, na.rm = TRUE) ...
R/sc.two.ways.stepback.R#L33       while (min <= alfa) { ...
R/sc.two.ways.stepback.R#L41           max <- max(pval, na.rm = TRUE) ...
R/sc.two.ways.stepback.R#L42           b <- pval == max ...
R/sc.two.ways.stepback.R#L43           c <- c(1:length(pval)) ...
R/sc.two.ways.stepback.R#L44           last <- c[b] ...
R/sc.two.ways.stepback.R#L45           lastname <- colnames(OUT)[last ...
R/sc.two.ways.stepback.R#L49           OUT <- as.data.frame(OUT) ...
R/sc.two.ways.stepback.R#L50           colnames(OUT) <- lastname ...
R/sc.two.ways.stepback.R#L55           sub <- cbind(d, OUT[, i]) ...
R/sc.two.ways.stepback.R#L56           sub <- as.data.frame(sub) ...
R/sc.two.ways.stepback.R#L57           lm2 <- glm(y ~ ., data = sub,  ...
R/sc.two.ways.stepback.R#L58           result <- summary(lm2) ...
R/sc.two.ways.stepback.R#L59           pval[i] <- result$coefficients ...
R/sc.two.ways.stepback.R#L63           if (min <= alfa) { ...
R/sc.two.ways.stepback.R#L67           } ...
R/sc.two.ways.stepback.R#L68           min <- 1 ...
R/sc.two.ways.stepback.R#L70       } ...
R/sc.two.ways.stepback.R#L71       lm1 <- glm(y ~ ., data = d, family ...
R/sc.two.ways.stepback.R#L72       result <- summary(lm1)$coefficient ...
R/sc.two.ways.stepback.R#L73       max <- max(result[-1], na.rm = TRU ...
R/sc.two.ways.stepback.R#L74       if (length(result[-1]) == 1) { ...
R/sc.two.ways.stepback.R#L77           max <- 0 ...
R/sc.two.ways.stepback.R#L78           lm1 <- glm(y ~ 1, family = fam ...
R/sc.two.ways.stepback.R#L80       } ...
R/sc.two.ways.stepback.R#L83   } ...
R/sc.two.ways.stepfor.R#L2   function(y = y, d = d, alfa = 0.05, fa ...
R/sc.two.ways.stepfor.R#L9       sub <- cbind(design, d[, i]) ...
R/sc.two.ways.stepfor.R#L10       sub <- as.data.frame(sub) ...
R/sc.two.ways.stepfor.R#L11       lm2 <- glm(y ~ ., data = sub, fami ...
R/sc.two.ways.stepfor.R#L12       result <- summary(lm2) ...
R/sc.two.ways.stepfor.R#L13       pval[i] <- result$coefficients[, 4 ...
R/sc.two.ways.stepfor.R#L17       b <- pval == min ...
R/sc.two.ways.stepfor.R#L18       c <- c(1:length(pval)) ...
R/sc.two.ways.stepfor.R#L19       pos <- c[b] ...
R/sc.two.ways.stepfor.R#L20       pos <- pos[!is.na(pos)][1] ...
R/sc.two.ways.stepfor.R#L21       design <- cbind(design, d[, pos]) ...
R/sc.two.ways.stepfor.R#L22       design <- as.data.frame(design) ...
R/sc.two.ways.stepfor.R#L23       colnames(design)[j] <- colnames(d) ...
R/sc.two.ways.stepfor.R#L24       if (ncol(d) == 2) { ...
R/sc.two.ways.stepfor.R#L26       } ...
R/sc.two.ways.stepfor.R#L27       d <- d[, -pos] ...
R/sc.two.ways.stepfor.R#L28       if (is.null(dim(d))) { ...
R/sc.two.ways.stepfor.R#L31       } ...
R/sc.two.ways.stepfor.R#L32       result2 <- summary(glm(y ~ ., data ...
R/sc.two.ways.stepfor.R#L35       ] ...
R/sc.two.ways.stepfor.R#L36       max <- max(result2[-1], na.rm = TR ...
R/sc.two.ways.stepfor.R#L37       while (max > alfa) { ...
R/sc.two.ways.stepfor.R#L44           min <- min(result2[-1], na.rm  ...
R/sc.two.ways.stepfor.R#L45           lastname <- names(result2)[res ...
R/sc.two.ways.stepfor.R#L49           design <- as.data.frame(design ...
R/sc.two.ways.stepfor.R#L50           colnames(design) <- lastname ...
R/sc.two.ways.stepfor.R#L53           , ...
R/sc.two.ways.stepfor.R#L54           4 ...
R/sc.two.ways.stepfor.R#L57       } ...
R/sc.two.ways.stepfor.R#L58       j <- ncol(design) + 1 ...
R/sc.two.ways.stepfor.R#L59       pval <- NULL ...
R/sc.two.ways.stepfor.R#L60       for (i in 1:ncol(d)) { ...
R/sc.two.ways.stepfor.R#L66       } ...
R/sc.two.ways.stepfor.R#L67       min <- min(pval, na.rm = TRUE) ...
R/sc.two.ways.stepfor.R#L68       if (ncol(d) == 1) { ...
R/sc.two.ways.stepfor.R#L70           design <- cbind(design, d[, 1] ...
R/sc.two.ways.stepfor.R#L71           design <- as.data.frame(design ...
R/sc.two.ways.stepfor.R#L72           colnames(design)[j] <- colname ...
R/sc.two.ways.stepfor.R#L75       } ...
R/sc.two.ways.stepfor.R#L78       lm1 <- glm(y ~ 1, family = family, ...
R/sc.two.ways.stepfor.R#L80       lm1 <- glm(y ~ ., data = design, f ...
R/sc.two.ways.stepfor.R#L83   } ...
R/scmpClass.R#L24   "sigClass", ...
R/scmpClass.R#L25   representation( ...
R/scmpClass.R#L28   ), ...
R/scmpClass.R#L29   validity = function(object) { ...
R/scmpClass.R#L31       stop("sig.genes slot must be a lis ...
R/scmpClass.R#L33   }, ...
R/scmpClass.R#L34   prototype = list( ...
R/scmpClass.R#L37   ) ...
R/scmpClass.R#L41   "scMaSigProClass", ...
R/scmpClass.R#L42   representation( ...
R/scmpClass.R#L51   ), ...
R/scmpClass.R#L52   validity = function(object) { ...
R/scmpClass.R#L55       stop("sce slot is not a valid Sing ...
R/scmpClass.R#L60       stop("scPVector slot is not a vali ...
R/scmpClass.R#L65       stop("scTFitClass slot is not a va ...
R/scmpClass.R#L70       stop("compress.sce slot is not a v ...
R/scmpClass.R#L75       stop("edesign slot is not a valid  ...
R/scmpClass.R#L80       stop("addParams slot is not a vali ...
R/scmpClass.R#L84       stop("'sig.genes' slot is not a va ...
R/scmpClass.R#L86   }, ...
R/scmpClass.R#L87   prototype = list( ...
R/scmpClass.R#L93   ) ...
R/scmpClass.R#L104   new("scMaSigProClass", ...
R/scmpClass.R#L113   ) ...
R/scmpClass.R#L117   "show", ...
R/scmpClass.R#L118   "scMaSigProClass", ...
R/scmpClass.R#L119   function(object) { ...
R/scmpClass.R#L121   } ...
R/scmpShow.R#L14   # Show Basic information ...
R/scmpShow.R#L15   cat("Class: ScMaSigPro\n") ...
R/scmpShow.R#L16   cat(paste0("nCells: ", ncol(object@sce ...
R/scmpShow.R#L17   cat(paste0("nFeatures: ", nrow(object@ ...
R/scmpShow.R#L18   cat("Pseudotime Range:", paste(range(c ...
R/scmpShow.R#L20   # Calculate the Compression ...
R/scmpShow.R#L21   compressed.cell.metadata <- as.data.fr ...
R/scmpShow.R#L22   if (length(compressed.cell.metadata) > ...
R/scmpShow.R#L25       "\nBinned Pseudotime: ", paste(ran ...
R/scmpShow.R#L26       round(mean(compressed.cell.metadat ...
R/scmpShow.R#L36   } ...
R/scmpShow.R#L38   # Calculate Dynamic Information ...
R/scmpShow.R#L39   if (length(object@scPVector@p.adjusted ...
R/scmpShow.R#L43       cat("\nSig. Profiles (P-vector): N ...
R/scmpShow.R#L45       cat(paste("\nSig. Models (sc.p.vec ...
R/scmpShow.R#L47   } ...
R/scmpShow.R#L49   # Influential Genes if any ...
R/scmpShow.R#L50   if (ncol(object@scTFit@influ.info) > 0 ...
R/scmpShow.R#L52   } ...
R/scmpShow.R#L57   if (return_type == "avg_bin_size") { ...
R/scmpShow.R#L60   } else if (return_type == "num_bins")  ...
R/scmpShow.R#L63   } else { ...
R/scmpShow.R#L65   } ...
R/scTFitClass.R#L28   "scTFitClass", ...
R/scTFitClass.R#L29   representation( ...
R/scTFitClass.R#L37   ), ...
R/scTFitClass.R#L38   validity = function(object) { ...
R/scTFitClass.R#L40       stop("sol slot must be a data.fram ...
R/scTFitClass.R#L43       stop("coefficients slot must be a  ...
R/scTFitClass.R#L46       stop("group.coeffs slot must be a  ...
R/scTFitClass.R#L49       stop("t.score slot must be a data. ...
R/scTFitClass.R#L52       stop("variables slot must be a cha ...
R/scTFitClass.R#L55       stop("groups.vector slot must be a ...
R/scTFitClass.R#L58       stop("influ.info slot must be a ma ...
R/scTFitClass.R#L60   }, ...
R/scTFitClass.R#L61   prototype = list( ...
R/scTFitClass.R#L69   ) ...
R/selectPath.m3.R#L18                           annotation_col ...
R/selectPath.m3.R#L19                           pseudotime_col ...
R/selectPath.m3.R#L20                           path_col = "Pa ...
R/selectPath.m3.R#L21   # Validate is supplied opject is a val ...
R/selectPath.m3.R#L22   assert_that(class(cdsObj)[1] == "cell_ ...
R/selectPath.m3.R#L24   ) ...
R/selectPath.m3.R#L25   # Check whether the lower dimensions a ...
R/selectPath.m3.R#L26   assert_that(nrow(as.data.frame(reduced ...
R/selectPath.m3.R#L28   ) ...
R/selectPath.m3.R#L30   # Check whether the lower dimensions a ...
R/selectPath.m3.R#L31   assert_that(nrow(as.data.frame(reduced ...
R/selectPath.m3.R#L33   ) ...
R/selectPath.m3.R#L35   # Extract UMAP ...
R/selectPath.m3.R#L36   dims <- reducedDims(cdsObj)[[toupper(r ...
R/selectPath.m3.R#L38   # Set rownames as cells ...
R/selectPath.m3.R#L39   dims[["cell"]] <- rownames(dims) ...
R/selectPath.m3.R#L41   # Check whether the lower dimensions a ...
R/selectPath.m3.R#L42   assert_that(all(rownames(dims) == coln ...
R/selectPath.m3.R#L44   ) ...
R/selectPath.m3.R#L46   # Check if supplied annotation_col exi ...
R/selectPath.m3.R#L47   assert_that(annotation_col %in% names( ...
R/selectPath.m3.R#L49   ) ...
R/selectPath.m3.R#L51   # Extract the vertex cell relationship ...
R/selectPath.m3.R#L52   assert_that(!is.null(cdsObj@principal_ ...
R/selectPath.m3.R#L54   ) ...
R/selectPath.m3.R#L56   # Check pseudotime ...
R/selectPath.m3.R#L57   assert_that(!is.null(cdsObj@principal_ ...
R/selectPath.m3.R#L59   ) ...
R/selectPath.m3.R#L61   # Create Pseudotime frame ...
R/selectPath.m3.R#L62   pTime.frame <- data.frame( ...
R/selectPath.m3.R#L65   ) ...
R/selectPath.m3.R#L67   # Create close vertex frames ...
R/selectPath.m3.R#L68   vertex.relation.frame <- data.frame( ...
R/selectPath.m3.R#L71   ) ...
R/selectPath.m3.R#L73   # Create annotation_col df ...
R/selectPath.m3.R#L74   anno.df <- data.frame( ...
R/selectPath.m3.R#L77   ) ...
R/selectPath.m3.R#L79   # Check before merge ...
R/selectPath.m3.R#L80   assert_that(all(anno.df[["cell"]] == d ...
R/selectPath.m3.R#L82   ) ...
R/selectPath.m3.R#L84   # Merge Anno.df with pseudotime ...
R/selectPath.m3.R#L85   anno.df <- merge(anno.df, pTime.frame, ...
R/selectPath.m3.R#L87   # Merge Anno.df with LD ...
R/selectPath.m3.R#L88   anno.df <- merge(anno.df, dims, by = " ...
R/selectPath.m3.R#L90   # Merge with the close vertex referenc ...
R/selectPath.m3.R#L91   anno.df <- merge(vertex.relation.frame ...
R/selectPath.m3.R#L93   # Set Columns ...
R/selectPath.m3.R#L94   colnames(anno.df) <- c("cell", "node", ...
R/selectPath.m3.R#L96   # Remove frame ...
R/selectPath.m3.R#L97   pTime.frame <- dims <- NULL ...
R/selectPath.m3.R#L99   # Extract the graph and MST ...
R/selectPath.m3.R#L100   assert_that(!is.null(cdsObj@principal_ ...
R/selectPath.m3.R#L102   ) ...
R/selectPath.m3.R#L103   assert_that(!is.null(cdsObj@principal_ ...
R/selectPath.m3.R#L105   ) ...
R/selectPath.m3.R#L107   # Extract ...
R/selectPath.m3.R#L108   pgraph.coords <- as.data.frame(t(cdsOb ...
R/selectPath.m3.R#L109   pgraph.coords[["node"]] <- rownames(pg ...
R/selectPath.m3.R#L110   names(pgraph.coords) <- c("x", "y", "n ...
R/selectPath.m3.R#L111   pgraph <- cdsObj@principal_graph@listD ...
R/selectPath.m3.R#L113   # Check for inf time ...
R/selectPath.m3.R#L114   if (any(is.infinite(anno.df[[pseudotim ...
R/selectPath.m3.R#L120   } else { ...
R/selectPath.m3.R#L122   } ...
R/selectPath.m3.R#L124   # Get edge Data ...
R/selectPath.m3.R#L125   edges_df <- get.data.frame(pgraph, wha ...
R/selectPath.m3.R#L127   # Merge with Edges ...
R/selectPath.m3.R#L128   edges_df <- merge(edges_df, pgraph.coo ...
R/selectPath.m3.R#L129   colnames(edges_df) <- c("from", "to",  ...
R/selectPath.m3.R#L131   # Create trajectory DF ...
R/selectPath.m3.R#L132   trajectory.df <- merge(edges_df, pgrap ...
R/selectPath.m3.R#L133   colnames(trajectory.df) <- c("from", " ...
R/selectPath.m3.R#L135   # # Run Shiny ...
R/selectPath.m3.R#L136   # selection.list <- list( ...
R/selectPath.m3.R#L137   #   root = "Y_14", ...
R/selectPath.m3.R#L138   #   path1 = c("Y_2","Y_14","Y_29","Y_3 ...
R/selectPath.m3.R#L139   #   path2 = c("Y_6","Y_14","Y_16","Y_1 ...
R/selectPath.m3.R#L140   # ) ...
R/selectPath.m3.R#L142   # View(trajectory.df) ...
R/selectPath.m3.R#L143   # View(anno.df) ...
R/selectPath.m3.R#L144   # View(pgraph.coords) ...
R/selectPath.m3.R#L145   # ...
R/selectPath.m3.R#L146   selection.list <- shinySelect( ...
R/selectPath.m3.R#L152   ) ...
R/selectPath.m3.R#L154   if (is.null(selection.list)) { ...
R/selectPath.m3.R#L156   } else { ...
R/selectPath.m3.R#L162       unlist( ...
R/selectPath.m3.R#L165       ) ...
R/selectPath.m3.R#L208       counts = rawCounts, ...
R/selectPath.m3.R#L209       cell_data = cell.metadata.sub, ...
R/selectPath.m3.R#L210       pseudotime_colname = pseudotime_co ...
R/selectPath.m3.R#L211       path_colname = path_col, ...
R/selectPath.m3.R#L212       use_as_bin = FALSE ...
R/selectPath.m3.R#L215   } ...
R/selectShortPath.R#L23                                  vector1 ...
R/selectShortPath.R#L24   if (length(vector1) > length(vector2)) ...
R/selectShortPath.R#L26       long_vec = vector1, long_vec_label ...
R/selectShortPath.R#L27       short_vec = vector2, short_vec_lab ...
R/selectShortPath.R#L29   } else if (length(vector2) > length(ve ...
R/selectShortPath.R#L31       long_vec = vector2, long_vec_label ...
R/selectShortPath.R#L32       short_vec = vector1, short_vec_lab ...
R/selectShortPath.R#L34   } else { ...
R/selectShortPath.R#L36   } ...
R/shinySelection.R#L23   # SetUI ...
R/shinySelection.R#L24   ui <- fluidPage( ...
R/shinySelection.R#L27       sidebarPanel( ...
R/shinySelection.R#L45       ), ...
R/shinySelection.R#L46       mainPanel( ...
R/shinySelection.R#L48           column(6), ...
R/shinySelection.R#L49           column(3, actionButton("save", ...
R/shinySelection.R#L50           column(3, actionButton("redo", ...
R/shinySelection.R#L53           column(6, h3("Monocle3-Prinicp ...
R/shinySelection.R#L54           column(6, uiOutput("m3PgrapSub ...
R/shinySelection.R#L57           column(4, verbatimTextOutput(" ...
R/shinySelection.R#L58           column(4, verbatimTextOutput(" ...
R/shinySelection.R#L59           column(4, verbatimTextOutput(" ...
R/shinySelection.R#L63           column(3, sliderInput("trPlotN ...
R/shinySelection.R#L64           column(3, sliderInput("trPlotC ...
R/shinySelection.R#L65           column(3, sliderInput("trPlotC ...
R/shinySelection.R#L66           column(3, sliderInput("trPlotS ...
R/shinySelection.R#L69           column(3, sliderInput("trPlotN ...
R/shinySelection.R#L70           column(3, sliderInput("trPlotC ...
R/shinySelection.R#L71           column(3, radioButtons("trPlot ...
R/shinySelection.R#L73               "Pseudotime" = "pTime", ...
R/shinySelection.R#L74               "Cell Annotations" = "anno ...
R/shinySelection.R#L76           )) ...
R/shinySelection.R#L78       ) ...
R/shinySelection.R#L80   ) ...
R/shinySelection.R#L83   if (inputType == "Monocle3") { ...
R/shinySelection.R#L86       selected_paths <- reactiveVal(list ...
R/shinySelection.R#L87       root_node <- reactiveVal(NULL) ...
R/shinySelection.R#L88       path1 <- reactiveVal(NULL) ...
R/shinySelection.R#L89       path2 <- reactiveVal(NULL) ...
R/shinySelection.R#L90       showSubTrPlot <- reactiveVal(FALSE ...
R/shinySelection.R#L91       nodepTime <- reactiveVal(NULL) ...
R/shinySelection.R#L93       # Main Monocle3 Plot Rendering ...
R/shinySelection.R#L94       output$trajectoryPlot <- renderPlo ...
R/shinySelection.R#L100           label_coords$path1_high <- ife ...
R/shinySelection.R#L102           label_coords$path1_high <- "No ...
R/shinySelection.R#L106           label_coords$path2_high <- ife ...
R/shinySelection.R#L108           label_coords$path2_high <- "No ...
R/shinySelection.R#L112           label_coords$root_high <- ifel ...
R/shinySelection.R#L114           label_coords$root_high <- "No" ...
R/shinySelection.R#L118           colName <- pseudotime_colname ...
R/shinySelection.R#L119           legendTitle <- "Inferred Pseud ...
R/shinySelection.R#L121           colName <- "anno" ...
R/shinySelection.R#L122           legendTitle <- "Supplied Annot ...
R/shinySelection.R#L128           helptext <- "Inf Pseudotime de ...
R/shinySelection.R#L129           showNotification("This dataset ...
R/shinySelection.R#L133           trajectory.map <- ggplot() + ...
R/shinySelection.R#L135               data = annotation_data, ae ...
R/shinySelection.R#L136               stroke = input$trPlotCellS ...
R/shinySelection.R#L140               data = label_coords, aes(x ...
R/shinySelection.R#L141               color = ifelse(label_coord ...
R/shinySelection.R#L143                   ifelse(label_coords$pa ...
R/shinySelection.R#L145                   ) ...
R/shinySelection.R#L147               ) ...
R/shinySelection.R#L154           ggplotly(trajectory.map, sourc ...
R/shinySelection.R#L158       }) ...
R/shinySelection.R#L161       # Set Root Node ...
R/shinySelection.R#L162       observeEvent(input$rootNode, { ...
R/shinySelection.R#L175           root_node(root_vector) ...
R/shinySelection.R#L177           # Set log message ...
R/shinySelection.R#L178           showNotification(paste("Select ...
R/shinySelection.R#L180           showNotification(paste("Please ...
R/shinySelection.R#L182       }) ...
R/shinySelection.R#L184       output$verbatRoot <- renderText({ ...
R/shinySelection.R#L188       }) ...
R/shinySelection.R#L189       output$verbatPath1 <- renderText({ ...
R/shinySelection.R#L193       }) ...
R/shinySelection.R#L194       output$verbatPath2 <- renderText({ ...
R/shinySelection.R#L197       }) ...
R/shinySelection.R#L199       # Set Path-1 ...
R/shinySelection.R#L200       observeEvent(input$Path1, { ...
R/shinySelection.R#L213           if (is.null(root_node())) { ...
R/shinySelection.R#L215           } else { ...
R/shinySelection.R#L218               # return ...
R/shinySelection.R#L219               path1(path1_vector) ...
R/shinySelection.R#L221               # Log ...
R/shinySelection.R#L222               showNotification(paste("Se ...
R/shinySelection.R#L224               showNotification(paste("Ro ...
R/shinySelection.R#L226           } ...
R/shinySelection.R#L228           showNotification(paste("Please ...
R/shinySelection.R#L230       }) ...
R/shinySelection.R#L231       # Set Path-2 ...
R/shinySelection.R#L232       observeEvent(input$Path2, { ...
R/shinySelection.R#L245           if (is.null(root_node())) { ...
R/shinySelection.R#L247           } else { ...
R/shinySelection.R#L250               if (length(path2_vector[pa ...
R/shinySelection.R#L254               } else { ...
R/shinySelection.R#L256               } ...
R/shinySelection.R#L258               showNotification(paste("Ro ...
R/shinySelection.R#L260           } ...
R/shinySelection.R#L262           showNotification(paste("Please ...
R/shinySelection.R#L264       }) ...
R/shinySelection.R#L267       # Subset the trajectory ...
R/shinySelection.R#L268       observeEvent(input$sub, { ...
R/shinySelection.R#L270           showSubTrPlot(TRUE) ...
R/shinySelection.R#L272           showNotification("You have not ...
R/shinySelection.R#L273           showSubTrPlot(FALSE) ...
R/shinySelection.R#L275       }) ...
R/shinySelection.R#L277       # Conditional Final Plot Title ...
R/shinySelection.R#L278       output$m3PgrapSubPlotTitle <- rend ...
R/shinySelection.R#L280           h3("Monocle3-Principal Graph-S ...
R/shinySelection.R#L282       }) ...
R/shinySelection.R#L284       # Final Plot rendering ...
R/shinySelection.R#L285       output$subTrajectoryPlot <- render ...
R/shinySelection.R#L287           return(NULL) ...
R/shinySelection.R#L308           label_coords_sub$path1_high <- ...
R/shinySelection.R#L309           label_coords_sub$path2_high <- ...
R/shinySelection.R#L310           label_coords_sub$root_high <-  ...
R/shinySelection.R#L314           colName <- pseudotime_colname ...
R/shinySelection.R#L316           colName <- "anno" ...
R/shinySelection.R#L320           geom_point( ...
R/shinySelection.R#L323           ) + ...
R/shinySelection.R#L324           geom_segment(data = trajectory ...
R/shinySelection.R#L325           geom_point( ...
R/shinySelection.R#L328               ifelse(label_coords_sub$pa ...
R/shinySelection.R#L330                   ifelse(label_coords_su ...
R/shinySelection.R#L332               ) ...
R/shinySelection.R#L334           ) + ...
R/shinySelection.R#L335           geom_text(data = label_coords_ ...
R/shinySelection.R#L336           theme_minimal() + ...
R/shinySelection.R#L337           xlab("UMAP-1") + ...
R/shinySelection.R#L338           ylab("UMAP-2") ...
R/shinySelection.R#L341       }) ...
R/shinySelection.R#L343       # Save button behavior ...
R/shinySelection.R#L344       observeEvent(input$save, { ...
R/shinySelection.R#L347           # Set Reactive ...
R/shinySelection.R#L348           selected_paths(list(root = roo ...
R/shinySelection.R#L350           # Check before close ...
R/shinySelection.R#L351           if (length(selected_paths()) ! ...
R/shinySelection.R#L353               modalDialog( ...
R/shinySelection.R#L357                   actionButton("confirmC ...
R/shinySelection.R#L358                   modalButton("No") ...
R/shinySelection.R#L360               ) ...
R/shinySelection.R#L362           } else { ...
R/shinySelection.R#L364           } ...
R/shinySelection.R#L366           # Check before close ...
R/shinySelection.R#L367           if (length(selected_paths()) ! ...
R/shinySelection.R#L369               modalDialog( ...
R/shinySelection.R#L373                   actionButton("confirmC ...
R/shinySelection.R#L374                   modalButton("No") ...
R/shinySelection.R#L376               ) ...
R/shinySelection.R#L378           } else { ...
R/shinySelection.R#L380           } ...
R/shinySelection.R#L382       }) ...
R/shinySelection.R#L384       observeEvent(input$confirmClose, { ...
R/shinySelection.R#L387       }) ...
R/shinySelection.R#L389       # Redo Selection ...
R/shinySelection.R#L390       observeEvent(input$redo, { ...
R/shinySelection.R#L396       }) ...
R/shinySelection.R#L398   } else { ...
R/shinySelection.R#L400   } ...
R/shinySelection.R#L402   selection <- suppressMessages(runApp(s ...
R/shinySelection.R#L404   if (is.null(selection)) { ...
R/shinySelection.R#L406   } else { ...
R/shinySelection.R#L408   } ...
R/showCoeff.R#L21   # Check Object Validity ...
R/showCoeff.R#L22   assert_that(is(scmpObj, "scMaSigProCla ...
R/showCoeff.R#L24   ) ...
R/showCoeff.R#L26   # Check if the sol exist ...
R/showCoeff.R#L27   assert_that(!all(dim(scmpObj@scTFit@so ...
R/showCoeff.R#L29   ) ...
R/showCoeff.R#L31   # Extract ...
R/showCoeff.R#L32   coefficients <- scmpObj@scTFit@coeffic ...
R/showCoeff.R#L34   if (!influ) { ...
R/showCoeff.R#L37   } ...
R/showCoeff.R#L39   # If viewing is requested ...
R/showCoeff.R#L40   if (view) { ...
R/showCoeff.R#L42   } ...
R/showCoeff.R#L44   # If requested ...
R/showCoeff.R#L45   if (return) { ...
R/showCoeff.R#L47   } ...
R/showGroupCoeff.R#L20   # Check Object Validity ...
R/showGroupCoeff.R#L21   assert_that(is(scmpObj, "scMaSigProCla ...
R/showGroupCoeff.R#L23   ) ...
R/showGroupCoeff.R#L25   # Check if the sol exist ...
R/showGroupCoeff.R#L26   assert_that(!all(dim(scmpObj@scTFit@gr ...
R/showGroupCoeff.R#L28   ) ...
R/showGroupCoeff.R#L30   # Extract ...
R/showGroupCoeff.R#L31   grpCoeff <- scmpObj@scTFit@group.coeff ...
R/showGroupCoeff.R#L33   # If viewing is requested ...
R/showGroupCoeff.R#L34   if (view) { ...
R/showGroupCoeff.R#L36   } ...
R/showGroupCoeff.R#L38   # If requested ...
R/showGroupCoeff.R#L39   if (return) { ...
R/showGroupCoeff.R#L41   } ...
R/showInflu.R#L20   # Check Object Validity ...
R/showInflu.R#L21   assert_that(is(scmpObj, "scMaSigProCla ...
R/showInflu.R#L23   ) ...
R/showInflu.R#L25   # Check if the sol exist ...
R/showInflu.R#L26   assert_that(!all(dim(scmpObj@scTFit@in ...
R/showInflu.R#L28   ) ...
R/showInflu.R#L30   # Extract ...
R/showInflu.R#L31   influ <- scmpObj@scTFit@influ.info ...
R/showInflu.R#L33   # If viewing is requested ...
R/showInflu.R#L34   if (view) { ...
R/showInflu.R#L36   } ...
R/showInflu.R#L38   # If requested ...
R/showInflu.R#L39   if (return) { ...
R/showInflu.R#L41   } ...
R/showParams.R#L21   # Check Object Validity ...
R/showParams.R#L22   assert_that(is(scmpObj, "scMaSigProCla ...
R/showParams.R#L24   ) ...
R/showParams.R#L26   # Get slot names, assuming 'addParams' ...
R/showParams.R#L27   all_slots <- slotNames(scmpObj) ...
R/showParams.R#L29   # Get 'addParams' slot data using the  ...
R/showParams.R#L30   addParamsData <- slot(scmpObj, "addPar ...
R/showParams.R#L32   # Get all slots of 'addParams', assumi ...
R/showParams.R#L33   params <- lapply(slotNames(addParamsDa ...
R/showParams.R#L35   }) ...
R/showParams.R#L37   # Get the data ...
R/showParams.R#L38   params <- data.frame( ...
R/showParams.R#L41   ) ...
R/showParams.R#L43   # If viewing is requested and the 'Vie ...
R/showParams.R#L44   if (view && exists("View")) { ...
R/showParams.R#L46   } ...
R/showParams.R#L48   # If requested, return the parameters ...
R/showParams.R#L49   if (return) { ...
R/showParams.R#L51   } ...
R/showSigProf.R#L22   # Check Object Validity ...
R/showSigProf.R#L23   assert_that(is(scmpObj, "scMaSigProCla ...
R/showSigProf.R#L25   ) ...
R/showSigProf.R#L27   # Check if the sol exist ...
R/showSigProf.R#L28   assert_that(!all(dim(scmpObj@scTFit@so ...
R/showSigProf.R#L30   ) ...
R/showSigProf.R#L32   # Extract ...
R/showSigProf.R#L33   sol <- showSol(scmpObj, view = FALSE,  ...
R/showSigProf.R#L34   # Extract rownames ...
R/showSigProf.R#L35   bulk.counts <- scmpObj@compress.sce@as ...
R/showSigProf.R#L36   bulk.counts <- bulk.counts[rownames(bu ...
R/showSigProf.R#L38   if (!influ) { ...
R/showSigProf.R#L41   } ...
R/showSigProf.R#L44   # If viewing is requested ...
R/showSigProf.R#L45   if (view) { ...
R/showSigProf.R#L47   } ...
R/showSigProf.R#L49   # If requested ...
R/showSigProf.R#L50   if (return) { ...
R/showSigProf.R#L52   } ...
R/showTS.R#L21   # Check Object Validity ...
R/showTS.R#L22   assert_that(is(scmpObj, "scMaSigProCla ...
R/showTS.R#L24   ) ...
R/showTS.R#L26   # Check if the sol exist ...
R/showTS.R#L27   assert_that(!all(dim(scmpObj@scTFit@t. ...
R/showTS.R#L29   ) ...
R/showTS.R#L31   # Extract ...
R/showTS.R#L32   tscore <- scmpObj@scTFit@t.score ...
R/showTS.R#L34   if (!influ) { ...
R/showTS.R#L37   } ...
R/showTS.R#L39   # If viewing is requested ...
R/showTS.R#L40   if (view) { ...
R/showTS.R#L42   } ...
R/showTS.R#L44   # If requested ...
R/showTS.R#L45   if (return) { ...
R/showTS.R#L47   } ...
R/solShow.R#L21   # Check Object Validity ...
R/solShow.R#L22   assert_that(is(scmpObj, "scMaSigProCla ...
R/solShow.R#L24   ) ...
R/solShow.R#L26   # Check if the sol exist ...
R/solShow.R#L27   assert_that(!all(dim(scmpObj@scTFit@so ...
R/solShow.R#L29   ) ...
R/solShow.R#L31   # Extract ...
R/solShow.R#L32   sol <- scmpObj@scTFit@sol %>% as.data. ...
R/solShow.R#L34   if (!influ) { ...
R/solShow.R#L37   } ...
R/solShow.R#L39   # If viewing is requested ...
R/solShow.R#L40   if (view) { ...
R/solShow.R#L42   } ...
R/solShow.R#L44   # If requested ...
R/solShow.R#L45   if (return) { ...
R/solShow.R#L47   } ...
R/squeeze.R#L98   # Initiate Variable ...
R/squeeze.R#L99   scmp_bin_lower_bound <- "scmp_l_bound" ...
R/squeeze.R#L100   scmp_bin_upper_bound <- "scmp_u_bound" ...
R/squeeze.R#L101   cell <- "cell" ...
R/squeeze.R#L103   # Check Object Validity ...
R/squeeze.R#L104   assert_that(is(scmpObject, "scMaSigPro ...
R/squeeze.R#L106   ) ...
R/squeeze.R#L108   # Extract cell metadata ...
R/squeeze.R#L109   raw_cell_metadata <- as.data.frame(col ...
R/squeeze.R#L111   # Drop Columns if exist ...
R/squeeze.R#L112   cols_to_drop <- c( ...
R/squeeze.R#L116   ) ...
R/squeeze.R#L117   raw_cell_metadata <- raw_cell_metadata ...
R/squeeze.R#L119   # Count slot ...
R/squeeze.R#L120   assert_that( ...
R/squeeze.R#L122       assay_name %in% names(scmpObject@s ...
R/squeeze.R#L125   ) ...
R/squeeze.R#L127   # Checks ...
R/squeeze.R#L128   assert_that(pseudotime_colname %in% co ...
R/squeeze.R#L130   ) ...
R/squeeze.R#L131   assert_that(path_colname %in% colnames ...
R/squeeze.R#L133   ) ...
R/squeeze.R#L134   assert_that(drop.fac >= 0.3, ...
R/squeeze.R#L136   ) ...
R/squeeze.R#L137   assert_that( ...
R/squeeze.R#L139       bin_method %in% c("Freedman.Diacon ...
R/squeeze.R#L142   ) ...
R/squeeze.R#L143   if (!is.null(additional_params)) { ...
R/squeeze.R#L145       msg = "Please provide 'additional_ ...
R/squeeze.R#L146       See details for more information" ...
R/squeeze.R#L150       msg = "Allowed additional paramete ...
R/squeeze.R#L152   } ...
R/squeeze.R#L154   # Add a column ...
R/squeeze.R#L155   raw_cell_metadata$cell <- rownames(raw ...
R/squeeze.R#L157   # Get the avaible paths ...
R/squeeze.R#L158   avail.paths <- as.vector(unique(raw_ce ...
R/squeeze.R#L160   # Check for path ...
R/squeeze.R#L161   assert_that(length(avail.paths) >= 2, ...
R/squeeze.R#L163   ) ...
R/squeeze.R#L165   if (verbose) { ...
R/squeeze.R#L170   } ...
R/squeeze.R#L172   # Apply transformations on data ...
R/squeeze.R#L173   discrete.list <- lapply(avail.paths, f ...
R/squeeze.R#L190       time_vector <- unique(time_vector) ...
R/squeeze.R#L191       length_n <- length(time_vector) ...
R/squeeze.R#L192       if (v) { ...
R/squeeze.R#L194       } ...
R/squeeze.R#L199       message(paste("Time points are alr ...
R/squeeze.R#L204       expr = { ...
R/squeeze.R#L206           time_vector = time_vector, nPo ...
R/squeeze.R#L207           drop_fac = drop.fac, bin_metho ...
R/squeeze.R#L211           message(paste( ...
R/squeeze.R#L214           )) ...
R/squeeze.R#L216       }, ...
R/squeeze.R#L217       error = function(e) { ...
R/squeeze.R#L220       } ...
R/squeeze.R#L225       time.vector = time_vector, ...
R/squeeze.R#L226       nBins = estBins, ...
R/squeeze.R#L227       bin = bin, bin.size = bin.size, lb ...
R/squeeze.R#L228       ubound = ubound ...
R/squeeze.R#L233       message(paste( ...
R/squeeze.R#L235       )) ...
R/squeeze.R#L251       if (verbose) { ...
R/squeeze.R#L253       } ...
R/squeeze.R#L255       # Adjust maximum Size ...
R/squeeze.R#L256       while (new_max > max.allowed) { ...
R/squeeze.R#L258           message("Iteration ", it) ...
R/squeeze.R#L263           bin_table = bin_table, ...
R/squeeze.R#L264           max_allowed = max.allowed, ...
R/squeeze.R#L265           verbose = verbose, ...
R/squeeze.R#L266           time_vector = time_vector, ...
R/squeeze.R#L267           lbound = lbound, ...
R/squeeze.R#L268           ubound = ubound, ...
R/squeeze.R#L269           bin = bin, ...
R/squeeze.R#L270           drop = drop.fac, ...
R/squeeze.R#L271           bin.size = bin.size, ...
R/squeeze.R#L272           method = method.bin ...
R/squeeze.R#L280       } ...
R/squeeze.R#L284       message(paste("Optimizing bin size ...
R/squeeze.R#L288       message(paste( ...
R/squeeze.R#L290       )) ...
R/squeeze.R#L298       # Get row from the Path frame ...
R/squeeze.R#L299       raw_i <- path.frame[i, , drop = FA ...
R/squeeze.R#L300       # print(paste("Completed raw_i <-  ...
R/squeeze.R#L303       # View(raw_i) ...
R/squeeze.R#L304       # stop() ...
R/squeeze.R#L305       pseudotime_i <- raw_i[[pseudotime_ ...
R/squeeze.R#L306       # print(paste("Completed pseudotim ...
R/squeeze.R#L308       # Check limits ...
R/squeeze.R#L309       if (pseudotime_i >= min(bin_table[ ...
R/squeeze.R#L312           matching_bins <- bin_table[( ...
R/squeeze.R#L314               pseudotime_i <= bin_table[ ...
R/squeeze.R#L316           # Filter bin_table based on ps ...
R/squeeze.R#L317           matching_bins <- bin_table[ ...
R/squeeze.R#L319               pseudotime_i >= bin_table[ ...
R/squeeze.R#L322           ] ...
R/squeeze.R#L324       } else if (pseudotime_i > max(bin_ ...
R/squeeze.R#L326       } else if (pseudotime_i < min(bin_ ...
R/squeeze.R#L328       } ...
R/squeeze.R#L330       if (nrow(matching_bins) > 0) { ...
R/squeeze.R#L333           path.frame[i, bin_pseudotime_c ...
R/squeeze.R#L335           path.frame[i, bin_pseudotime_c ...
R/squeeze.R#L337       } ...
R/squeeze.R#L355       group_by_at(bin.time.col) %>% ...
R/squeeze.R#L356       summarise(!!sym(bin.members.colnam ...
R/squeeze.R#L374       sce = processed.path.frame, ...
R/squeeze.R#L375       compressed = binned.path.frame ...
R/squeeze.R#L377   }) ...
R/squeeze.R#L379   # Bind rows and convert to data frame, ...
R/squeeze.R#L380   processed_cell_metadata.list <- lapply ...
R/squeeze.R#L382   }) ...
R/squeeze.R#L383   processed_binned_cell_metadata.list <- ...
R/squeeze.R#L385   }) ...
R/squeeze.R#L387   # List to frame ...
R/squeeze.R#L388   processed_cell_metadata <- bind_rows(p ...
R/squeeze.R#L390   processed_binned_cell_metadata <- bind ...
R/squeeze.R#L393   # Remove the 'cell' column ...
R/squeeze.R#L394   processed_cell_metadata <- processed_c ...
R/squeeze.R#L396   ## Add Processed Cell Matadata back wi ...
R/squeeze.R#L397   scmpObject@sce@colData <- DataFrame(pr ...
R/squeeze.R#L399   # Set the 'cell' column as rownames ...
R/squeeze.R#L400   rownames(processed_cell_metadata) <- p ...
R/squeeze.R#L401   rownames(processed_binned_cell_metadat ...
R/squeeze.R#L403   # Prune and Trails ...
R/squeeze.R#L404   if (prune_bins) { ...
R/squeeze.R#L409   } ...
R/squeeze.R#L411   if (fill_gaps) { ...
R/squeeze.R#L415       # Get path ...
R/squeeze.R#L416       binned.path.frame <- processed_bin ...
R/squeeze.R#L418       # Generate refernce ...
R/squeeze.R#L419       ref_time <- c(1:nrow(binned.path.f ...
R/squeeze.R#L421       # Align with the binned Pseudotime ...
R/squeeze.R#L422       binned.pseudotime <- binned.path.f ...
R/squeeze.R#L424       # Check ...
R/squeeze.R#L425       if (!all(ref_time == binned.pseudo ...
R/squeeze.R#L430       } ...
R/squeeze.R#L432       processed_binned_cell_metadata_tmp ...
R/squeeze.R#L435       ) ...
R/squeeze.R#L438   } ...
R/squeeze.R#L440   if (drop_trails) { ...
R/squeeze.R#L444       group_by(!!sym(path_colname)) %>% ...
R/squeeze.R#L445       summarize(max_time = max(!!sym(bin ...
R/squeeze.R#L446       ungroup() ...
R/squeeze.R#L453       filter(!!sym(bin_pseudotime_colnam ...
R/squeeze.R#L457       if (nrow(rows_to_remove) > 0) { ...
R/squeeze.R#L459       } ...
R/squeeze.R#L464       filter(!!sym(bin_pseudotime_colnam ...
R/squeeze.R#L467   } ...
R/squeeze.R#L469   compressed.sce <- SingleCellExperiment ...
R/squeeze.R#L470   compressed.sce@colData <- DataFrame(pr ...
R/squeeze.R#L471   scmpObject@compress.sce <- compressed. ...
R/squeeze.R#L473   # Get Counts ...
R/squeeze.R#L474   scmpObject <- make.pseudobulk.counts( ...
R/squeeze.R#L480   ) ...
R/squeeze.R#L482   # Update Slots ...
R/squeeze.R#L483   scmpObject@addParams@pseudotime_colnam ...
R/squeeze.R#L484   scmpObject@addParams@path_colname <- p ...
R/squeeze.R#L485   scmpObject@addParams@bin_method <- bin ...
R/squeeze.R#L486   scmpObject@addParams@bin_pseudotime_co ...
R/squeeze.R#L487   scmpObject@addParams@bin_colname <- bi ...
R/squeeze.R#L488   scmpObject@addParams@bin_members_colna ...
R/squeeze.R#L489   scmpObject@addParams@bin_size_colname  ...
R/squeeze.R#L490   return(scmpObject) ...
man/align.pseudotime.Rd#L8   scmpObj, ...
man/align.pseudotime.Rd#L9   pseudotime_col, ...
man/align.pseudotime.Rd#L10   path_col, ...
man/align.pseudotime.Rd#L11   method = "rescale", ...
man/align.pseudotime.Rd#L12   verbose = TRUE ...
man/annotate_monocle3_cds.Rd#L8   cds, ...
man/annotate_monocle3_cds.Rd#L9   reduction_method = "umap", ...
man/annotate_monocle3_cds.Rd#L10   path_prefix = "Path", ...
man/annotate_monocle3_cds.Rd#L11   root_label = "root", ...
man/annotate_monocle3_cds.Rd#L12   pseudotime_colname = "Pseudotime", ...
man/annotate_monocle3_cds.Rd#L13   path_colname = path_prefix, ...
man/annotate_monocle3_cds.Rd#L14   verbose = TRUE ...
man/annotate_monocle3_cds.Rd#L55   reduction_method = "umap", ...
man/annotate_monocle3_cds.Rd#L56   path_prefix = "Path", ...
man/annotate_monocle3_cds.Rd#L57   root_label = "root", ...
man/annotate_monocle3_cds.Rd#L58   path_colname = path_prefix, ...
man/annotate_monocle3_cds.Rd#L59   verbose = TRUE ...
man/annotate_sce.Rd#L8   sce, ...
man/annotate_sce.Rd#L9   pseudotime_colname = "Pseudotime", ...
man/annotate_sce.Rd#L10   path_prefix = "Path", ...
man/annotate_sce.Rd#L11   root_label = "root", ...
man/annotate_sce.Rd#L12   path_colname = path_prefix, ...
man/annotate_sce.Rd#L13   existing_pseudotime_colname = NULL, ...
man/annotate_sce.Rd#L14   existing_path_colname = NULL, ...
man/annotate_sce.Rd#L15   labels_exist = FALSE, ...
man/annotate_sce.Rd#L16   verbose = TRUE ...
man/annotate_sce.Rd#L60   pseudotime_colname = "Pseudotime", ...
man/annotate_sce.Rd#L61   path_colname = "Path" ...
man/as_scmp.Rd#L8   object, ...
man/as_scmp.Rd#L9   from = "cds", ...
man/as_scmp.Rd#L10   path_prefix = "Path", ...
man/as_scmp.Rd#L11   root_label = "root", ...
man/as_scmp.Rd#L12   pseudotime_colname = "Pseudotime", ...
man/as_scmp.Rd#L13   align_pseudotime = TRUE, ...
man/as_scmp.Rd#L14   path_colname = path_prefix, ...
man/as_scmp.Rd#L15   annotation_colname = "cell_type", ...
man/as_scmp.Rd#L16   verbose = TRUE, ...
man/as_scmp.Rd#L17   interactive = TRUE, ...
man/as_scmp.Rd#L18   additional_params = list(labels_exist  ...
man/as_scmp.Rd#L62   from = "cds", path_prefix = "Path", ...
man/as_scmp.Rd#L63   root_label = "root", ...
man/as_scmp.Rd#L64   path_colname = path_prefix, ...
man/as_scmp.Rd#L65   verbose = TRUE ...
man/create_range.Rd#L8   x, ...
man/create_range.Rd#L9   bin_size_colname = "scmp_bin_size", ...
man/create_range.Rd#L10   bin_colname = "scmp_bin", ...
man/create_range.Rd#L11   verbose = TRUE ...
man/create_range.Rd#L17   \item{bin}{A factor column representin ...
man/create_range.Rd#L18   \item{bin_size}{A numeric column repre ...
man/create_range.Rd#L19   \item{binned_time}{A numeric column re ...
man/create_range.Rd#L24   \describe{ ...
man/create_range.Rd#L29   } ...
man/create_scmpObj.Rd#L8   counts, ...
man/create_scmpObj.Rd#L9   cell_data, ...
man/create_scmpObj.Rd#L10   feature_data, ...
man/create_scmpObj.Rd#L11   bin_counts = NULL, ...
man/create_scmpObj.Rd#L12   bin_cell_data = NULL, ...
man/create_scmpObj.Rd#L13   pseudotime_colname, ...
man/create_scmpObj.Rd#L14   path_colname, ...
man/create_scmpObj.Rd#L15   use_as_bin = FALSE ...
man/create_scmpObj.Rd#L46   feature_data = NULL, ...
man/create_scmpObj.Rd#L47   bin_counts = NULL, bin_cell_data = NUL ...
man/create_scmpObj.Rd#L48   pseudotime_col, path_col, use_as_bin = ...
man/edesignClass-class.Rd#L26   Valid objects must have: ...
man/edesignClass-class.Rd#L27   \itemize{ ...
man/edesignClass-class.Rd#L31   } ...
man/make.pseudobulk.counts.Rd#L8   scmpObject, ...
man/make.pseudobulk.counts.Rd#L9   bin_members_colname = scmpObject@addPa ...
man/make.pseudobulk.counts.Rd#L10   bin_colname = scmpObject@addParams@bin ...
man/make.pseudobulk.counts.Rd#L11   assay_name = "counts", ...
man/make.pseudobulk.counts.Rd#L12   cluster_count_by = "sum" ...
man/make.pseudobulk.counts.Rd#L47   counts = sc_counts, ...
man/make.pseudobulk.counts.Rd#L48   pseudo_bulk_profile = pb_profile, ...
man/make.pseudobulk.counts.Rd#L49   cluster_count_by = "mean" ...
man/optimize.bin.max.Rd#L8   bin_table, ...
man/optimize.bin.max.Rd#L9   max_allowed, ...
man/optimize.bin.max.Rd#L10   verbose = TRUE, ...
man/optimize.bin.max.Rd#L11   time_vector, ...
man/optimize.bin.max.Rd#L12   lbound, ...
man/optimize.bin.max.Rd#L13   ubound, ...
man/optimize.bin.max.Rd#L14   bin, ...
man/optimize.bin.max.Rd#L15   bin.size, ...
man/optimize.bin.max.Rd#L16   method, ...
man/optimize.bin.max.Rd#L17   drop ...
man/sc.get.siggenes.Rd#L8   scmpObj, ...
man/sc.get.siggenes.Rd#L9   rsq = 0.7, ...
man/sc.get.siggenes.Rd#L10   vars = c("all", "each", "groups"), ...
man/sc.get.siggenes.Rd#L11   significant.intercept = "dummy", ...
man/sc.get.siggenes.Rd#L12   use_Influ = TRUE ...
man/sc.get.siggenes.Rd#L23   \item \code{"all"}: generates one sing ...
man/sc.get.siggenes.Rd#L24   \item \code{"each"}: generates as many ...
man/sc.get.siggenes.Rd#L25   \item \code{"groups"}: generates a sig ...
man/sc.get.siggenes.Rd#L36   \item \code{summary}: A vector or matr ...
man/sc.get.siggenes.Rd#L37   \item \code{sig.genes}: A list with de ...
man/sc.get.siggenes.Rd#L38   Each element of the list is also a lis ...
man/sc.get.siggenes.Rd#L40       \item{\code{sig.profiles}:}{Expres ...
man/sc.get.siggenes.Rd#L41       \item{\code{coefficients}:}{Regres ...
man/sc.get.siggenes.Rd#L42       \item{\code{group.coeffs}:}{Regres ...
man/sc.get.siggenes.Rd#L43       \item{\code{sig.pvalues}:}{P-value ...
man/sc.get.siggenes.Rd#L44       \item{\code{g}:}{Number of genes.} ...
man/sc.get.siggenes.Rd#L45       \item{\code{...}:}{Arguments passe ...
man/sc.get.siggenes.Rd#L47   } ...
man/sc.make.design.matrix.Rd#L8   scmpObject, ...
man/sc.make.design.matrix.Rd#L9   poly_degree = 2, ...
man/sc.make.design.matrix.Rd#L10   bin_pseudotime_colname = scmpObject@ad ...
man/sc.make.design.matrix.Rd#L11   path_colname = scmpObject@addParams@pa ...
man/sc.p.vector.Rd#L8   scmpObj, ...
man/sc.p.vector.Rd#L9   Q = 0.05, ...
man/sc.p.vector.Rd#L10   MT.adjust = "BH", ...
man/sc.p.vector.Rd#L11   min.obs = 6, ...
man/sc.p.vector.Rd#L12   family = negative.binomial(theta = 1), ...
man/sc.p.vector.Rd#L13   epsilon = 1e-05, ...
man/sc.p.vector.Rd#L14   verbose = TRUE, ...
man/sc.p.vector.Rd#L15   offset = TRUE, ...
man/sc.p.vector.Rd#L16   parallel = FALSE, ...
man/sc.p.vector.Rd#L17   useWeights = TRUE, ...
man/sc.p.vector.Rd#L18   useInverseWeights = TRUE, ...
man/sc.p.vector.Rd#L19   logWeights = TRUE, ...
man/sc.p.vector.Rd#L20   logOffset = TRUE, ...
man/sc.p.vector.Rd#L21   computeTheta = TRUE, ...
man/sc.p.vector.Rd#L22   max_it = 100, ...
man/sc.p.vector.Rd#L23   globalTheta = TRUE ...
man/sc.p.vector.Rd#L78   and indicate array naming. \code{rowna ...
man/sc.p.vector.Rd#L79   \code{colnames(design)} are the given  ...
man/sc.plot.bins.bar.Rd#L8   scmpObj, ...
man/sc.plot.bins.bar.Rd#L9   path_colname = scmpObj@addParams@path_ ...
man/sc.plot.bins.bar.Rd#L10   bin_size_colname = scmpObj@addParams@b ...
man/sc.plot.bins.bar.Rd#L11   bin_pseudotime_colname = scmpObj@addPa ...
man/sc.plot.bins.tile.Rd#L8   scmpObj, ...
man/sc.plot.bins.tile.Rd#L9   path_colname = scmpObj@addParams@path_ ...
man/sc.plot.bins.tile.Rd#L10   bin_size_colname = scmpObj@addParams@b ...
man/sc.plot.bins.tile.Rd#L11   bin_pseudotime_colname = scmpObj@addPa ...
man/sc.PlotGroups.Rd#L8   scmpObj, ...
man/sc.PlotGroups.Rd#L9   feature_id, ...
man/sc.PlotGroups.Rd#L10   xlab = "Pooled Pseudotime", ...
man/sc.PlotGroups.Rd#L11   ylab = "Pseudobulk Expression", ...
man/sc.PlotGroups.Rd#L12   smoothness = 0.01, ...
man/sc.PlotGroups.Rd#L13   logs = TRUE, ...
man/sc.PlotGroups.Rd#L14   logType = "log10" ...
man/sc.T.fit.Rd#L8   scmpObj, ...
man/sc.T.fit.Rd#L9   step.method = "backward", ...
man/sc.T.fit.Rd#L10   Q = scmpObj@addParams@Q, ...
man/sc.T.fit.Rd#L11   nvar.correction = FALSE, ...
man/sc.T.fit.Rd#L12   family = scmpObj@distribution, ...
man/sc.T.fit.Rd#L13   epsilon = scmpObj@addParams@epsilon, ...
man/sc.T.fit.Rd#L14   offset = scmpObj@addParams@offset, ...
man/sc.T.fit.Rd#L15   verbose = TRUE, ...
man/sc.T.fit.Rd#L16   parallel = TRUE, ...
man/sc.T.fit.Rd#L17   useWeights = scmpObj@addParams@useWeig ...
man/sc.T.fit.Rd#L18   useInverseWeights = scmpObj@addParams@ ...
man/sc.T.fit.Rd#L19   logWeights = scmpObj@addParams@logWeig ...
man/sc.T.fit.Rd#L20   logOffset = scmpObj@addParams@logOffse ...
man/sc.T.fit.Rd#L21   max_it = scmpObj@addParams@max_it ...
man/sc.T.fit.Rd#L58   \item p-value of the regression ANOVA ...
man/sc.T.fit.Rd#L59   \item R-squared of the model ...
man/sc.T.fit.Rd#L60   \item p-value of the regression coeffi ...
man/scmp_estimateSizeFactorsForMatrix.Rd#L8   counts, ...
man/scmp_estimateSizeFactorsForMatrix.Rd#L9   locfunc = stats::median, ...
man/scmp_estimateSizeFactorsForMatrix.Rd#L10   geoMeans, ...
man/scmp_estimateSizeFactorsForMatrix.Rd#L11   controlGenes, ...
man/scmp_estimateSizeFactorsForMatrix.Rd#L12   type = c("ratio", "poscounts") ...
man/scTFitClass-class.Rd#L16   \itemize{ ...
man/scTFitClass-class.Rd#L20   }} ...
man/select_longer_vector.Rd#L21   \item \code{long_vec}: The longer vect ...
man/select_longer_vector.Rd#L22   \item \code{long_vec_label}: The label ...
man/select_longer_vector.Rd#L23   \item \code{short_vec}: The shorter ve ...
man/select_longer_vector.Rd#L24   \item \code{short_vec_label}: The labe ...
man/selectPath.m3.Rd#L8   cdsObj, ...
man/selectPath.m3.Rd#L9   redDim = "umap", ...
man/selectPath.m3.Rd#L10   annotation_col = "cell.type", ...
man/selectPath.m3.Rd#L11   pseudotime_col = "Pseudotime", ...
man/selectPath.m3.Rd#L12   path_col = "Path" ...
man/shinySelect.Rd#L8   trajectory_data, ...
man/shinySelect.Rd#L9   annotation_data, ...
man/shinySelect.Rd#L10   label_coords, ...
man/shinySelect.Rd#L11   pseudotime_colname, ...
man/shinySelect.Rd#L12   inputType = "Monocle3" ...
man/squeeze.Rd#L8   scmpObject, ...
man/squeeze.Rd#L9   pseudotime_colname = scmpObject@addPar ...
man/squeeze.Rd#L10   path_colname = scmpObject@addParams@pa ...
man/squeeze.Rd#L11   bin_method = "Sturges", ...
man/squeeze.Rd#L12   drop.fac = 0.5, ...
man/squeeze.Rd#L13   verbose = TRUE, ...
man/squeeze.Rd#L14   bin_members_colname = "scmp_bin_member ...
man/squeeze.Rd#L15   bin_colname = "scmp_bin", ...
man/squeeze.Rd#L16   bin_size_colname = "scmp_bin_size", ...
man/squeeze.Rd#L17   bin_pseudotime_colname = "scmp_binned_ ...
man/squeeze.Rd#L18   split_bins = TRUE, ...
man/squeeze.Rd#L19   prune_bins = TRUE, ...
man/squeeze.Rd#L20   assay_name = "counts", ...
man/squeeze.Rd#L21   drop_trails = TRUE, ...
man/squeeze.Rd#L22   cluster_count_by = "sum", ...
man/squeeze.Rd#L23   fill_gaps = TRUE, ...
man/squeeze.Rd#L24   additional_params = list(use_unique_ti ...
man/squeeze.Rd#L103   cell_metadata = data.frame, pseudotime ...
man/squeeze.Rd#L104   bin_method = "Sturges", drop.fac = 0.5 ...
vignettes/Basic-Workflow.Rmd#L32   install.packages("devtools") ...
vignettes/Basic-Workflow.Rmd#L37   ref = "main", ...
vignettes/Basic-Workflow.Rmd#L38   auth_token = "ghp_q02e4vfxT0PRdtgWshKx ...
vignettes/Basic-Workflow.Rmd#L61   object = sim.sce, from = "sce", ...
vignettes/Basic-Workflow.Rmd#L62   align_pseudotime = TRUE, ...
vignettes/Basic-Workflow.Rmd#L63   verbose = FALSE, ...
vignettes/Basic-Workflow.Rmd#L64   additional_params = list( ...
vignettes/Basic-Workflow.Rmd#L68   ) ...
* Checking if package already exists in CRAN... OK
* Checking for bioc-devel mailing list subscription...
* NOTE: Cannot determine whether maintainer is subscribed to the Bioc-Devel mailing list (requires admin credentials). Subscribe here: https://stat.ethz.ch/mailman/listinfo/bioc-devel
* Checking for support site registration...
* ERROR: Maintainer must add package name to Watched Tags on the support site; Edit your Support Site User Profile to add Watched Tags.
